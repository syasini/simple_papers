{
    "annotations": [
        {
            "text": "# Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks",
            "page": 1,
            "x": 165,
            "y": 95,
            "width": 282,
            "height": 45,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "0-title",
            "chunk_id": "6fedc129-f3b9-4ef4-af9a-1112731a2e2f",
            "group_text": "# Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks\n\nPatrick Lewis$^{\\star \\dagger}$, Ethan Perez$^{\\star}$,\n\nAleksandra Piktus$^{\\dagger}$, Fabio Petroni$^{\\dagger}$, Vladimir Karpukhin$^{\\dagger}$, Naman Goyal$^{\\dagger}$, Heinrich K\u00fcttler$^{\\dagger}$,\n\nMike Lewis$^{\\dagger}$, Wen-tau Yih$^{\\dagger}$, Tim Rockt\u00e4schel$^{\\dagger \\ddagger}$, Sebastian Riedel$^{\\dagger \\ddagger}$, Douwe Kiela$^{\\dagger}$\n\n\u2020Facebook AI Research; \u2021University College London; *New York University;\n            plewis@fb.com"
        },
        {
            "text": "Patrick Lewis$^{\\star \\dagger}$, Ethan Perez$^{\\star}$,\n\nAleksandra Piktus$^{\\dagger}$, Fabio Petroni$^{\\dagger}$, Vladimir Karpukhin$^{\\dagger}$, Naman Goyal$^{\\dagger}$, Heinrich K\u00fcttler$^{\\dagger}$,\n\nMike Lewis$^{\\dagger}$, Wen-tau Yih$^{\\dagger}$, Tim Rockt\u00e4schel$^{\\dagger \\ddagger}$, Sebastian Riedel$^{\\dagger \\ddagger}$, Douwe Kiela$^{\\dagger}$",
            "page": 1,
            "x": 108,
            "y": 175,
            "width": 408,
            "height": 75,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "0-title",
            "chunk_id": "cef5c3e9-5b1c-4aa1-b509-c5c445fc02aa",
            "group_text": "# Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks\n\nPatrick Lewis$^{\\star \\dagger}$, Ethan Perez$^{\\star}$,\n\nAleksandra Piktus$^{\\dagger}$, Fabio Petroni$^{\\dagger}$, Vladimir Karpukhin$^{\\dagger}$, Naman Goyal$^{\\dagger}$, Heinrich K\u00fcttler$^{\\dagger}$,\n\nMike Lewis$^{\\dagger}$, Wen-tau Yih$^{\\dagger}$, Tim Rockt\u00e4schel$^{\\dagger \\ddagger}$, Sebastian Riedel$^{\\dagger \\ddagger}$, Douwe Kiela$^{\\dagger}$\n\n\u2020Facebook AI Research; \u2021University College London; *New York University;\n            plewis@fb.com"
        },
        {
            "text": "\u2020Facebook AI Research; \u2021University College London; *New York University;\n            plewis@fb.com",
            "page": 1,
            "x": 148,
            "y": 259,
            "width": 317,
            "height": 29,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "0-title",
            "chunk_id": "c1fdc8cc-d142-4ce2-9c8c-6c0dfc41c13f",
            "group_text": "# Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks\n\nPatrick Lewis$^{\\star \\dagger}$, Ethan Perez$^{\\star}$,\n\nAleksandra Piktus$^{\\dagger}$, Fabio Petroni$^{\\dagger}$, Vladimir Karpukhin$^{\\dagger}$, Naman Goyal$^{\\dagger}$, Heinrich K\u00fcttler$^{\\dagger}$,\n\nMike Lewis$^{\\dagger}$, Wen-tau Yih$^{\\dagger}$, Tim Rockt\u00e4schel$^{\\dagger \\ddagger}$, Sebastian Riedel$^{\\dagger \\ddagger}$, Douwe Kiela$^{\\dagger}$\n\n\u2020Facebook AI Research; \u2021University College London; *New York University;\n            plewis@fb.com"
        },
        {
            "text": "# Abstract\n\nLarge pre-trained language models have been shown to store factual knowledge in their parameters, and achieve state-of-the-art results when fine-tuned on downstream NLP tasks. However, their ability to access and precisely manipulate knowledge is still limited, and hence on knowledge-intensive tasks, their performance lags behind task-specific architectures. Additionally, providing provenance for their decisions and updating their world knowledge remain open research problems. Pre-trained models with a differentiable access mechanism to explicit non-parametric memory have so far been only investigated for extractive downstream tasks. We explore a general-purpose fine-tuning recipe for retrieval-augmented generation (RAG) \u2014 models which combine pre-trained parametric and non-parametric memory for language generation. We introduce RAG models where the parametric memory is a pre-trained seq2seq model and the non-parametric memory is a dense vector index of Wikipedia, accessed with a pre-trained neural retriever. We compare two RAG formulations, one which conditions on the same retrieved passages across the whole generated sequence, and another which can use different passages per token. We fine-tune and evaluate our models on a wide range of knowledge-intensive NLP tasks and set the state of the art on three open domain QA tasks, outperforming parametric seq2seq models and task-specific retrieve-and-extract architectures. For language generation tasks, we find that RAG models generate more specific, diverse and factual language than a state-of-the-art parametric-only seq2seq baseline.",
            "page": 1,
            "x": 138,
            "y": 313,
            "width": 335,
            "height": 260,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "1-abstract",
            "chunk_id": "c42c3385-1a9d-4209-aad7-185652da233a",
            "group_text": "# Abstract\n\nLarge pre-trained language models have been shown to store factual knowledge in their parameters, and achieve state-of-the-art results when fine-tuned on downstream NLP tasks. However, their ability to access and precisely manipulate knowledge is still limited, and hence on knowledge-intensive tasks, their performance lags behind task-specific architectures. Additionally, providing provenance for their decisions and updating their world knowledge remain open research problems. Pre-trained models with a differentiable access mechanism to explicit non-parametric memory have so far been only investigated for extractive downstream tasks. We explore a general-purpose fine-tuning recipe for retrieval-augmented generation (RAG) \u2014 models which combine pre-trained parametric and non-parametric memory for language generation. We introduce RAG models where the parametric memory is a pre-trained seq2seq model and the non-parametric memory is a dense vector index of Wikipedia, accessed with a pre-trained neural retriever. We compare two RAG formulations, one which conditions on the same retrieved passages across the whole generated sequence, and another which can use different passages per token. We fine-tune and evaluate our models on a wide range of knowledge-intensive NLP tasks and set the state of the art on three open domain QA tasks, outperforming parametric seq2seq models and task-specific retrieve-and-extract architectures. For language generation tasks, we find that RAG models generate more specific, diverse and factual language than a state-of-the-art parametric-only seq2seq baseline."
        },
        {
            "text": "# 1 Introduction\n\nPre-trained neural language models have been shown to learn a substantial amount of in-depth knowledge from data [47]. They can do so without any access to an external memory, as a parameterized implicit knowledge base [51, 52]. While this development is exciting, such models do have downsides: They cannot easily expand or revise their memory, can't straightforwardly provide insight into their predictions, and may produce \"hallucinations\" [38]. Hybrid models that combine parametric memory with non-parametric (i.e., retrieval-based) memories [20, 26, 48] can address some of these issues because knowledge can be directly revised and expanded, and accessed knowledge can be inspected and interpreted. REALM [20] and ORQA [31], two recently introduced models that combine masked language models [8] with a differentiable retriever, have shown promising results,",
            "page": 1,
            "x": 101,
            "y": 593,
            "width": 408,
            "height": 131,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "2-introduction",
            "chunk_id": "6a04c2fa-572b-4a72-abd4-09da200838f9",
            "group_text": "# 1 Introduction\n\nPre-trained neural language models have been shown to learn a substantial amount of in-depth knowledge from data [47]. They can do so without any access to an external memory, as a parameterized implicit knowledge base [51, 52]. While this development is exciting, such models do have downsides: They cannot easily expand or revise their memory, can't straightforwardly provide insight into their predictions, and may produce \"hallucinations\" [38]. Hybrid models that combine parametric memory with non-parametric (i.e., retrieval-based) memories [20, 26, 48] can address some of these issues because knowledge can be directly revised and expanded, and accessed knowledge can be inspected and interpreted. REALM [20] and ORQA [31], two recently introduced models that combine masked language models [8] with a differentiable retriever, have shown promising results,\n\nbut have only explored open-domain extractive question answering. Here, we bring hybrid parametric and non-parametric memory to the \u201cworkhorse of NLP,\u201d i.e. sequence-to-sequence (seq2seq) models.\n\nWe endow pre-trained, parametric-memory generation models with a non-parametric memory through a general-purpose fine-tuning approach which we refer to as retrieval-augmented generation (RAG). We build RAG models where the parametric memory is a pre-trained seq2seq transformer, and the non-parametric memory is a dense vector index of Wikipedia, accessed with a pre-trained neural retriever. We combine these components in a probabilistic model trained end-to-end (Fig. 1). The retriever (Dense Passage Retriever [26], henceforth DPR) provides latent documents conditioned on the input, and the seq2seq model (BART [32]) then conditions on these latent documents together with the input to generate the output. We marginalize the latent documents with a top-K approximation, either on a per-output basis (assuming the same document is responsible for all tokens) or a per-token basis (where different documents are responsible for different tokens). Like T5 [51] or BART, RAG can be fine-tuned on any seq2seq task, whereby both the generator and retriever are jointly learned.\n\nThere has been extensive previous work proposing architectures to enrich systems with non-parametric memory which are trained from scratch for specific tasks, e.g. memory networks [64, 55], stack-augmented networks [25] and memory layers [30]. In contrast, we explore a setting where both parametric and non-parametric memory components are pre-trained and pre-loaded with extensive knowledge. Crucially, by using pre-trained access mechanisms, the ability to access knowledge is present without additional training.\n\nOur results highlight the benefits of combining parametric and non-parametric memory with generation for _knowledge-intensive tasks_\u2014tasks that humans could not reasonably be expected to perform without access to an external knowledge source. Our RAG models achieve state-of-the-art results on open Natural Questions [29], WebQuestions [3] and CuratedTrec [2] and strongly outperform recent approaches that use specialised pre-training objectives on TriviaQA [24]. Despite these being extractive tasks, we find that unconstrained generation outperforms previous extractive approaches. For knowledge-intensive generation, we experiment with MS-MARCO [1] and Jeopardy question generation, and we find that our models generate responses that are more factual, specific, and diverse than a BART baseline. For FEVER [56] fact verification, we achieve results within 4.3% of state-of-the-art pipeline models which use strong retrieval supervision. Finally, we demonstrate that the non-parametric memory can be replaced to update the models\u2019 knowledge as the world changes.\u00b9"
        },
        {
            "text": "but have only explored open-domain extractive question answering. Here, we bring hybrid parametric and non-parametric memory to the \u201cworkhorse of NLP,\u201d i.e. sequence-to-sequence (seq2seq) models.",
            "page": 2,
            "x": 104,
            "y": 254,
            "width": 403,
            "height": 25,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "2-introduction",
            "chunk_id": "85c71a72-5936-4a17-b635-c582012c0fe1",
            "group_text": "# 1 Introduction\n\nPre-trained neural language models have been shown to learn a substantial amount of in-depth knowledge from data [47]. They can do so without any access to an external memory, as a parameterized implicit knowledge base [51, 52]. While this development is exciting, such models do have downsides: They cannot easily expand or revise their memory, can't straightforwardly provide insight into their predictions, and may produce \"hallucinations\" [38]. Hybrid models that combine parametric memory with non-parametric (i.e., retrieval-based) memories [20, 26, 48] can address some of these issues because knowledge can be directly revised and expanded, and accessed knowledge can be inspected and interpreted. REALM [20] and ORQA [31], two recently introduced models that combine masked language models [8] with a differentiable retriever, have shown promising results,\n\nbut have only explored open-domain extractive question answering. Here, we bring hybrid parametric and non-parametric memory to the \u201cworkhorse of NLP,\u201d i.e. sequence-to-sequence (seq2seq) models.\n\nWe endow pre-trained, parametric-memory generation models with a non-parametric memory through a general-purpose fine-tuning approach which we refer to as retrieval-augmented generation (RAG). We build RAG models where the parametric memory is a pre-trained seq2seq transformer, and the non-parametric memory is a dense vector index of Wikipedia, accessed with a pre-trained neural retriever. We combine these components in a probabilistic model trained end-to-end (Fig. 1). The retriever (Dense Passage Retriever [26], henceforth DPR) provides latent documents conditioned on the input, and the seq2seq model (BART [32]) then conditions on these latent documents together with the input to generate the output. We marginalize the latent documents with a top-K approximation, either on a per-output basis (assuming the same document is responsible for all tokens) or a per-token basis (where different documents are responsible for different tokens). Like T5 [51] or BART, RAG can be fine-tuned on any seq2seq task, whereby both the generator and retriever are jointly learned.\n\nThere has been extensive previous work proposing architectures to enrich systems with non-parametric memory which are trained from scratch for specific tasks, e.g. memory networks [64, 55], stack-augmented networks [25] and memory layers [30]. In contrast, we explore a setting where both parametric and non-parametric memory components are pre-trained and pre-loaded with extensive knowledge. Crucially, by using pre-trained access mechanisms, the ability to access knowledge is present without additional training.\n\nOur results highlight the benefits of combining parametric and non-parametric memory with generation for _knowledge-intensive tasks_\u2014tasks that humans could not reasonably be expected to perform without access to an external knowledge source. Our RAG models achieve state-of-the-art results on open Natural Questions [29], WebQuestions [3] and CuratedTrec [2] and strongly outperform recent approaches that use specialised pre-training objectives on TriviaQA [24]. Despite these being extractive tasks, we find that unconstrained generation outperforms previous extractive approaches. For knowledge-intensive generation, we experiment with MS-MARCO [1] and Jeopardy question generation, and we find that our models generate responses that are more factual, specific, and diverse than a BART baseline. For FEVER [56] fact verification, we achieve results within 4.3% of state-of-the-art pipeline models which use strong retrieval supervision. Finally, we demonstrate that the non-parametric memory can be replaced to update the models\u2019 knowledge as the world changes.\u00b9"
        },
        {
            "text": "We endow pre-trained, parametric-memory generation models with a non-parametric memory through a general-purpose fine-tuning approach which we refer to as retrieval-augmented generation (RAG). We build RAG models where the parametric memory is a pre-trained seq2seq transformer, and the non-parametric memory is a dense vector index of Wikipedia, accessed with a pre-trained neural retriever. We combine these components in a probabilistic model trained end-to-end (Fig. 1). The retriever (Dense Passage Retriever [26], henceforth DPR) provides latent documents conditioned on the input, and the seq2seq model (BART [32]) then conditions on these latent documents together with the input to generate the output. We marginalize the latent documents with a top-K approximation, either on a per-output basis (assuming the same document is responsible for all tokens) or a per-token basis (where different documents are responsible for different tokens). Like T5 [51] or BART, RAG can be fine-tuned on any seq2seq task, whereby both the generator and retriever are jointly learned.",
            "page": 2,
            "x": 104,
            "y": 282,
            "width": 403,
            "height": 123,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "2-introduction",
            "chunk_id": "cb58d13f-79b3-4241-80bf-d605cf96e41e",
            "group_text": "# 1 Introduction\n\nPre-trained neural language models have been shown to learn a substantial amount of in-depth knowledge from data [47]. They can do so without any access to an external memory, as a parameterized implicit knowledge base [51, 52]. While this development is exciting, such models do have downsides: They cannot easily expand or revise their memory, can't straightforwardly provide insight into their predictions, and may produce \"hallucinations\" [38]. Hybrid models that combine parametric memory with non-parametric (i.e., retrieval-based) memories [20, 26, 48] can address some of these issues because knowledge can be directly revised and expanded, and accessed knowledge can be inspected and interpreted. REALM [20] and ORQA [31], two recently introduced models that combine masked language models [8] with a differentiable retriever, have shown promising results,\n\nbut have only explored open-domain extractive question answering. Here, we bring hybrid parametric and non-parametric memory to the \u201cworkhorse of NLP,\u201d i.e. sequence-to-sequence (seq2seq) models.\n\nWe endow pre-trained, parametric-memory generation models with a non-parametric memory through a general-purpose fine-tuning approach which we refer to as retrieval-augmented generation (RAG). We build RAG models where the parametric memory is a pre-trained seq2seq transformer, and the non-parametric memory is a dense vector index of Wikipedia, accessed with a pre-trained neural retriever. We combine these components in a probabilistic model trained end-to-end (Fig. 1). The retriever (Dense Passage Retriever [26], henceforth DPR) provides latent documents conditioned on the input, and the seq2seq model (BART [32]) then conditions on these latent documents together with the input to generate the output. We marginalize the latent documents with a top-K approximation, either on a per-output basis (assuming the same document is responsible for all tokens) or a per-token basis (where different documents are responsible for different tokens). Like T5 [51] or BART, RAG can be fine-tuned on any seq2seq task, whereby both the generator and retriever are jointly learned.\n\nThere has been extensive previous work proposing architectures to enrich systems with non-parametric memory which are trained from scratch for specific tasks, e.g. memory networks [64, 55], stack-augmented networks [25] and memory layers [30]. In contrast, we explore a setting where both parametric and non-parametric memory components are pre-trained and pre-loaded with extensive knowledge. Crucially, by using pre-trained access mechanisms, the ability to access knowledge is present without additional training.\n\nOur results highlight the benefits of combining parametric and non-parametric memory with generation for _knowledge-intensive tasks_\u2014tasks that humans could not reasonably be expected to perform without access to an external knowledge source. Our RAG models achieve state-of-the-art results on open Natural Questions [29], WebQuestions [3] and CuratedTrec [2] and strongly outperform recent approaches that use specialised pre-training objectives on TriviaQA [24]. Despite these being extractive tasks, we find that unconstrained generation outperforms previous extractive approaches. For knowledge-intensive generation, we experiment with MS-MARCO [1] and Jeopardy question generation, and we find that our models generate responses that are more factual, specific, and diverse than a BART baseline. For FEVER [56] fact verification, we achieve results within 4.3% of state-of-the-art pipeline models which use strong retrieval supervision. Finally, we demonstrate that the non-parametric memory can be replaced to update the models\u2019 knowledge as the world changes.\u00b9"
        },
        {
            "text": "There has been extensive previous work proposing architectures to enrich systems with non-parametric memory which are trained from scratch for specific tasks, e.g. memory networks [64, 55], stack-augmented networks [25] and memory layers [30]. In contrast, we explore a setting where both parametric and non-parametric memory components are pre-trained and pre-loaded with extensive knowledge. Crucially, by using pre-trained access mechanisms, the ability to access knowledge is present without additional training.",
            "page": 2,
            "x": 104,
            "y": 408,
            "width": 403,
            "height": 68,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "2-introduction",
            "chunk_id": "4ba219e6-411d-4492-aaec-59682bacf7a0",
            "group_text": "# 1 Introduction\n\nPre-trained neural language models have been shown to learn a substantial amount of in-depth knowledge from data [47]. They can do so without any access to an external memory, as a parameterized implicit knowledge base [51, 52]. While this development is exciting, such models do have downsides: They cannot easily expand or revise their memory, can't straightforwardly provide insight into their predictions, and may produce \"hallucinations\" [38]. Hybrid models that combine parametric memory with non-parametric (i.e., retrieval-based) memories [20, 26, 48] can address some of these issues because knowledge can be directly revised and expanded, and accessed knowledge can be inspected and interpreted. REALM [20] and ORQA [31], two recently introduced models that combine masked language models [8] with a differentiable retriever, have shown promising results,\n\nbut have only explored open-domain extractive question answering. Here, we bring hybrid parametric and non-parametric memory to the \u201cworkhorse of NLP,\u201d i.e. sequence-to-sequence (seq2seq) models.\n\nWe endow pre-trained, parametric-memory generation models with a non-parametric memory through a general-purpose fine-tuning approach which we refer to as retrieval-augmented generation (RAG). We build RAG models where the parametric memory is a pre-trained seq2seq transformer, and the non-parametric memory is a dense vector index of Wikipedia, accessed with a pre-trained neural retriever. We combine these components in a probabilistic model trained end-to-end (Fig. 1). The retriever (Dense Passage Retriever [26], henceforth DPR) provides latent documents conditioned on the input, and the seq2seq model (BART [32]) then conditions on these latent documents together with the input to generate the output. We marginalize the latent documents with a top-K approximation, either on a per-output basis (assuming the same document is responsible for all tokens) or a per-token basis (where different documents are responsible for different tokens). Like T5 [51] or BART, RAG can be fine-tuned on any seq2seq task, whereby both the generator and retriever are jointly learned.\n\nThere has been extensive previous work proposing architectures to enrich systems with non-parametric memory which are trained from scratch for specific tasks, e.g. memory networks [64, 55], stack-augmented networks [25] and memory layers [30]. In contrast, we explore a setting where both parametric and non-parametric memory components are pre-trained and pre-loaded with extensive knowledge. Crucially, by using pre-trained access mechanisms, the ability to access knowledge is present without additional training.\n\nOur results highlight the benefits of combining parametric and non-parametric memory with generation for _knowledge-intensive tasks_\u2014tasks that humans could not reasonably be expected to perform without access to an external knowledge source. Our RAG models achieve state-of-the-art results on open Natural Questions [29], WebQuestions [3] and CuratedTrec [2] and strongly outperform recent approaches that use specialised pre-training objectives on TriviaQA [24]. Despite these being extractive tasks, we find that unconstrained generation outperforms previous extractive approaches. For knowledge-intensive generation, we experiment with MS-MARCO [1] and Jeopardy question generation, and we find that our models generate responses that are more factual, specific, and diverse than a BART baseline. For FEVER [56] fact verification, we achieve results within 4.3% of state-of-the-art pipeline models which use strong retrieval supervision. Finally, we demonstrate that the non-parametric memory can be replaced to update the models\u2019 knowledge as the world changes.\u00b9"
        },
        {
            "text": "Our results highlight the benefits of combining parametric and non-parametric memory with generation for _knowledge-intensive tasks_\u2014tasks that humans could not reasonably be expected to perform without access to an external knowledge source. Our RAG models achieve state-of-the-art results on open Natural Questions [29], WebQuestions [3] and CuratedTrec [2] and strongly outperform recent approaches that use specialised pre-training objectives on TriviaQA [24]. Despite these being extractive tasks, we find that unconstrained generation outperforms previous extractive approaches. For knowledge-intensive generation, we experiment with MS-MARCO [1] and Jeopardy question generation, and we find that our models generate responses that are more factual, specific, and diverse than a BART baseline. For FEVER [56] fact verification, we achieve results within 4.3% of state-of-the-art pipeline models which use strong retrieval supervision. Finally, we demonstrate that the non-parametric memory can be replaced to update the models\u2019 knowledge as the world changes.\u00b9",
            "page": 2,
            "x": 104,
            "y": 479,
            "width": 403,
            "height": 124,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "2-introduction",
            "chunk_id": "7659d194-09da-4dfa-ba6b-bed2f0c7d47c",
            "group_text": "# 1 Introduction\n\nPre-trained neural language models have been shown to learn a substantial amount of in-depth knowledge from data [47]. They can do so without any access to an external memory, as a parameterized implicit knowledge base [51, 52]. While this development is exciting, such models do have downsides: They cannot easily expand or revise their memory, can't straightforwardly provide insight into their predictions, and may produce \"hallucinations\" [38]. Hybrid models that combine parametric memory with non-parametric (i.e., retrieval-based) memories [20, 26, 48] can address some of these issues because knowledge can be directly revised and expanded, and accessed knowledge can be inspected and interpreted. REALM [20] and ORQA [31], two recently introduced models that combine masked language models [8] with a differentiable retriever, have shown promising results,\n\nbut have only explored open-domain extractive question answering. Here, we bring hybrid parametric and non-parametric memory to the \u201cworkhorse of NLP,\u201d i.e. sequence-to-sequence (seq2seq) models.\n\nWe endow pre-trained, parametric-memory generation models with a non-parametric memory through a general-purpose fine-tuning approach which we refer to as retrieval-augmented generation (RAG). We build RAG models where the parametric memory is a pre-trained seq2seq transformer, and the non-parametric memory is a dense vector index of Wikipedia, accessed with a pre-trained neural retriever. We combine these components in a probabilistic model trained end-to-end (Fig. 1). The retriever (Dense Passage Retriever [26], henceforth DPR) provides latent documents conditioned on the input, and the seq2seq model (BART [32]) then conditions on these latent documents together with the input to generate the output. We marginalize the latent documents with a top-K approximation, either on a per-output basis (assuming the same document is responsible for all tokens) or a per-token basis (where different documents are responsible for different tokens). Like T5 [51] or BART, RAG can be fine-tuned on any seq2seq task, whereby both the generator and retriever are jointly learned.\n\nThere has been extensive previous work proposing architectures to enrich systems with non-parametric memory which are trained from scratch for specific tasks, e.g. memory networks [64, 55], stack-augmented networks [25] and memory layers [30]. In contrast, we explore a setting where both parametric and non-parametric memory components are pre-trained and pre-loaded with extensive knowledge. Crucially, by using pre-trained access mechanisms, the ability to access knowledge is present without additional training.\n\nOur results highlight the benefits of combining parametric and non-parametric memory with generation for _knowledge-intensive tasks_\u2014tasks that humans could not reasonably be expected to perform without access to an external knowledge source. Our RAG models achieve state-of-the-art results on open Natural Questions [29], WebQuestions [3] and CuratedTrec [2] and strongly outperform recent approaches that use specialised pre-training objectives on TriviaQA [24]. Despite these being extractive tasks, we find that unconstrained generation outperforms previous extractive approaches. For knowledge-intensive generation, we experiment with MS-MARCO [1] and Jeopardy question generation, and we find that our models generate responses that are more factual, specific, and diverse than a BART baseline. For FEVER [56] fact verification, we achieve results within 4.3% of state-of-the-art pipeline models which use strong retrieval supervision. Finally, we demonstrate that the non-parametric memory can be replaced to update the models\u2019 knowledge as the world changes.\u00b9"
        },
        {
            "text": "## 2  Methods\n\nWe explore RAG models, which use the input sequence $x$ to retrieve text documents $z$ and use them as additional context when generating the target sequence $y$. As shown in Figure 1, our models leverage two components: (i) a retriever $p_\\eta(z|x)$ with parameters $\\eta$ that returns (top-K truncated) distributions over text passages given a query $x$ and (ii) a generator $p_\\theta(y_i|x, z, y_{1:i-1})$ parametrized",
            "page": 2,
            "x": 103,
            "y": 613,
            "width": 404,
            "height": 73,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "3-methods",
            "chunk_id": "876b529a-888f-4aec-b68b-68a15910c13b",
            "group_text": "## 2  Methods\n\nWe explore RAG models, which use the input sequence $x$ to retrieve text documents $z$ and use them as additional context when generating the target sequence $y$. As shown in Figure 1, our models leverage two components: (i) a retriever $p_\\eta(z|x)$ with parameters $\\eta$ that returns (top-K truncated) distributions over text passages given a query $x$ and (ii) a generator $p_\\theta(y_i|x, z, y_{1:i-1})$ parametrized\n\n\u00b9Code to run experiments with RAG has been open-sourced as part of the HuggingFace Transformers Library [66] and can be found at https://github.com/huggingface/transformers/blob/master/examples/rag/. An interactive demo of RAG models can be found at https://huggingface.co/rag/\n\nby $\\theta$ that generates a current token based on a context of the previous $i-1$ tokens $y_{1:i-1}$, the original input $x$ and a retrieved passage $z$.\n\nTo train the retriever and generator end-to-end, we treat the retrieved document as a latent variable. We propose two models that marginalize over the latent documents in different ways to produce a distribution over generated text. In one approach, *RAG-Sequence*, the model uses the same document to predict each target token. The second approach, *RAG-Token*, can predict each target token based on a different document. In the following, we formally introduce both models and then describe the $p_\\eta$ and $p_\\theta$ components, as well as the training and decoding procedure."
        },
        {
            "text": "\u00b9Code to run experiments with RAG has been open-sourced as part of the HuggingFace Transformers Library [66] and can be found at https://github.com/huggingface/transformers/blob/master/examples/rag/. An interactive demo of RAG models can be found at https://huggingface.co/rag/",
            "page": 2,
            "x": 104,
            "y": 690,
            "width": 403,
            "height": 34,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "3-methods",
            "chunk_id": "a7ad04d9-66d7-4fa1-9c93-793d31d9a1ff",
            "group_text": "## 2  Methods\n\nWe explore RAG models, which use the input sequence $x$ to retrieve text documents $z$ and use them as additional context when generating the target sequence $y$. As shown in Figure 1, our models leverage two components: (i) a retriever $p_\\eta(z|x)$ with parameters $\\eta$ that returns (top-K truncated) distributions over text passages given a query $x$ and (ii) a generator $p_\\theta(y_i|x, z, y_{1:i-1})$ parametrized\n\n\u00b9Code to run experiments with RAG has been open-sourced as part of the HuggingFace Transformers Library [66] and can be found at https://github.com/huggingface/transformers/blob/master/examples/rag/. An interactive demo of RAG models can be found at https://huggingface.co/rag/\n\nby $\\theta$ that generates a current token based on a context of the previous $i-1$ tokens $y_{1:i-1}$, the original input $x$ and a retrieved passage $z$.\n\nTo train the retriever and generator end-to-end, we treat the retrieved document as a latent variable. We propose two models that marginalize over the latent documents in different ways to produce a distribution over generated text. In one approach, *RAG-Sequence*, the model uses the same document to predict each target token. The second approach, *RAG-Token*, can predict each target token based on a different document. In the following, we formally introduce both models and then describe the $p_\\eta$ and $p_\\theta$ components, as well as the training and decoding procedure."
        },
        {
            "text": "by $\\theta$ that generates a current token based on a context of the previous $i-1$ tokens $y_{1:i-1}$, the original input $x$ and a retrieved passage $z$.",
            "page": 3,
            "x": 104,
            "y": 71,
            "width": 403,
            "height": 25,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "3-methods",
            "chunk_id": "9cdb5926-691a-4b17-ad1d-d9e55784cf71",
            "group_text": "## 2  Methods\n\nWe explore RAG models, which use the input sequence $x$ to retrieve text documents $z$ and use them as additional context when generating the target sequence $y$. As shown in Figure 1, our models leverage two components: (i) a retriever $p_\\eta(z|x)$ with parameters $\\eta$ that returns (top-K truncated) distributions over text passages given a query $x$ and (ii) a generator $p_\\theta(y_i|x, z, y_{1:i-1})$ parametrized\n\n\u00b9Code to run experiments with RAG has been open-sourced as part of the HuggingFace Transformers Library [66] and can be found at https://github.com/huggingface/transformers/blob/master/examples/rag/. An interactive demo of RAG models can be found at https://huggingface.co/rag/\n\nby $\\theta$ that generates a current token based on a context of the previous $i-1$ tokens $y_{1:i-1}$, the original input $x$ and a retrieved passage $z$.\n\nTo train the retriever and generator end-to-end, we treat the retrieved document as a latent variable. We propose two models that marginalize over the latent documents in different ways to produce a distribution over generated text. In one approach, *RAG-Sequence*, the model uses the same document to predict each target token. The second approach, *RAG-Token*, can predict each target token based on a different document. In the following, we formally introduce both models and then describe the $p_\\eta$ and $p_\\theta$ components, as well as the training and decoding procedure."
        },
        {
            "text": "To train the retriever and generator end-to-end, we treat the retrieved document as a latent variable. We propose two models that marginalize over the latent documents in different ways to produce a distribution over generated text. In one approach, *RAG-Sequence*, the model uses the same document to predict each target token. The second approach, *RAG-Token*, can predict each target token based on a different document. In the following, we formally introduce both models and then describe the $p_\\eta$ and $p_\\theta$ components, as well as the training and decoding procedure.",
            "page": 3,
            "x": 104,
            "y": 99,
            "width": 403,
            "height": 69,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "3-methods",
            "chunk_id": "7a0c04a2-615d-4710-b773-00410deb6332",
            "group_text": "## 2  Methods\n\nWe explore RAG models, which use the input sequence $x$ to retrieve text documents $z$ and use them as additional context when generating the target sequence $y$. As shown in Figure 1, our models leverage two components: (i) a retriever $p_\\eta(z|x)$ with parameters $\\eta$ that returns (top-K truncated) distributions over text passages given a query $x$ and (ii) a generator $p_\\theta(y_i|x, z, y_{1:i-1})$ parametrized\n\n\u00b9Code to run experiments with RAG has been open-sourced as part of the HuggingFace Transformers Library [66] and can be found at https://github.com/huggingface/transformers/blob/master/examples/rag/. An interactive demo of RAG models can be found at https://huggingface.co/rag/\n\nby $\\theta$ that generates a current token based on a context of the previous $i-1$ tokens $y_{1:i-1}$, the original input $x$ and a retrieved passage $z$.\n\nTo train the retriever and generator end-to-end, we treat the retrieved document as a latent variable. We propose two models that marginalize over the latent documents in different ways to produce a distribution over generated text. In one approach, *RAG-Sequence*, the model uses the same document to predict each target token. The second approach, *RAG-Token*, can predict each target token based on a different document. In the following, we formally introduce both models and then describe the $p_\\eta$ and $p_\\theta$ components, as well as the training and decoding procedure."
        },
        {
            "text": "2.1  Models\n\n**RAG-Sequence Model**   The RAG-Sequence model uses the same retrieved document to generate the complete *sequence*. Technically, it treats the retrieved document as a single latent variable that is marginalized to get the seq2seq probability $p(y|x)$ via a top-K approximation. Concretely, the top K documents are retrieved using the retriever, and the generator produces the output sequence probability for each document, which are then marginalized,",
            "page": 3,
            "x": 104,
            "y": 177,
            "width": 403,
            "height": 79,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "4-models",
            "chunk_id": "56d293b3-7945-49ad-af12-5946d64c264f",
            "group_text": "2.1  Models\n\n**RAG-Sequence Model**   The RAG-Sequence model uses the same retrieved document to generate the complete *sequence*. Technically, it treats the retrieved document as a single latent variable that is marginalized to get the seq2seq probability $p(y|x)$ via a top-K approximation. Concretely, the top K documents are retrieved using the retriever, and the generator produces the output sequence probability for each document, which are then marginalized,\n\n$p_{\\text{RAG-Sequence}}(y|x) \\approx \\sum_{z \\in \\text{top-}k(p(\\cdot|x))} p_\\eta(z|x) p_\\theta(y|x, z) = \\sum_{z \\in \\text{top-}k(p(\\cdot|x))} p_\\eta(z|x) \\prod_{i}^{N} p_\\theta(y_i|x, z, y_{1:i-1})$\n\n**RAG-Token Model**   In the RAG-Token model we can draw a different latent document for each target *token* and marginalize accordingly. This allows the generator to choose content from several documents when producing an answer. Concretely, the top K documents are retrieved using the retriever, and then the generator produces a distribution for the next output token for each document, before marginalizing, and repeating the process with the following output token. Formally, we define:\n\n$p_{\\text{RAG-Token}}(y|x) \\approx \\prod_{i}^{N} \\sum_{z \\in \\text{top-}k(p(\\cdot|x))} p_{\\eta}(z|x) p_{\\theta}(y_i|x, z, y_{1:i-1})$\n\nFinally, we note that RAG can be used for sequence classification tasks by considering the target class as a target sequence of length one, in which case RAG-Sequence and RAG-Token are equivalent."
        },
        {
            "text": "$p_{\\text{RAG-Sequence}}(y|x) \\approx \\sum_{z \\in \\text{top-}k(p(\\cdot|x))} p_\\eta(z|x) p_\\theta(y|x, z) = \\sum_{z \\in \\text{top-}k(p(\\cdot|x))} p_\\eta(z|x) \\prod_{i}^{N} p_\\theta(y_i|x, z, y_{1:i-1})$",
            "page": 3,
            "x": 140,
            "y": 258,
            "width": 331,
            "height": 36,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "4-models",
            "chunk_id": "0fb1ec67-04f1-49f4-8aed-512840834fc9",
            "group_text": "2.1  Models\n\n**RAG-Sequence Model**   The RAG-Sequence model uses the same retrieved document to generate the complete *sequence*. Technically, it treats the retrieved document as a single latent variable that is marginalized to get the seq2seq probability $p(y|x)$ via a top-K approximation. Concretely, the top K documents are retrieved using the retriever, and the generator produces the output sequence probability for each document, which are then marginalized,\n\n$p_{\\text{RAG-Sequence}}(y|x) \\approx \\sum_{z \\in \\text{top-}k(p(\\cdot|x))} p_\\eta(z|x) p_\\theta(y|x, z) = \\sum_{z \\in \\text{top-}k(p(\\cdot|x))} p_\\eta(z|x) \\prod_{i}^{N} p_\\theta(y_i|x, z, y_{1:i-1})$\n\n**RAG-Token Model**   In the RAG-Token model we can draw a different latent document for each target *token* and marginalize accordingly. This allows the generator to choose content from several documents when producing an answer. Concretely, the top K documents are retrieved using the retriever, and then the generator produces a distribution for the next output token for each document, before marginalizing, and repeating the process with the following output token. Formally, we define:\n\n$p_{\\text{RAG-Token}}(y|x) \\approx \\prod_{i}^{N} \\sum_{z \\in \\text{top-}k(p(\\cdot|x))} p_{\\eta}(z|x) p_{\\theta}(y_i|x, z, y_{1:i-1})$\n\nFinally, we note that RAG can be used for sequence classification tasks by considering the target class as a target sequence of length one, in which case RAG-Sequence and RAG-Token are equivalent."
        },
        {
            "text": "**RAG-Token Model**   In the RAG-Token model we can draw a different latent document for each target *token* and marginalize accordingly. This allows the generator to choose content from several documents when producing an answer. Concretely, the top K documents are retrieved using the retriever, and then the generator produces a distribution for the next output token for each document, before marginalizing, and repeating the process with the following output token. Formally, we define:",
            "page": 3,
            "x": 104,
            "y": 299,
            "width": 404,
            "height": 60,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "4-models",
            "chunk_id": "77895520-46dc-4a27-be36-e50084a13333",
            "group_text": "2.1  Models\n\n**RAG-Sequence Model**   The RAG-Sequence model uses the same retrieved document to generate the complete *sequence*. Technically, it treats the retrieved document as a single latent variable that is marginalized to get the seq2seq probability $p(y|x)$ via a top-K approximation. Concretely, the top K documents are retrieved using the retriever, and the generator produces the output sequence probability for each document, which are then marginalized,\n\n$p_{\\text{RAG-Sequence}}(y|x) \\approx \\sum_{z \\in \\text{top-}k(p(\\cdot|x))} p_\\eta(z|x) p_\\theta(y|x, z) = \\sum_{z \\in \\text{top-}k(p(\\cdot|x))} p_\\eta(z|x) \\prod_{i}^{N} p_\\theta(y_i|x, z, y_{1:i-1})$\n\n**RAG-Token Model**   In the RAG-Token model we can draw a different latent document for each target *token* and marginalize accordingly. This allows the generator to choose content from several documents when producing an answer. Concretely, the top K documents are retrieved using the retriever, and then the generator produces a distribution for the next output token for each document, before marginalizing, and repeating the process with the following output token. Formally, we define:\n\n$p_{\\text{RAG-Token}}(y|x) \\approx \\prod_{i}^{N} \\sum_{z \\in \\text{top-}k(p(\\cdot|x))} p_{\\eta}(z|x) p_{\\theta}(y_i|x, z, y_{1:i-1})$\n\nFinally, we note that RAG can be used for sequence classification tasks by considering the target class as a target sequence of length one, in which case RAG-Sequence and RAG-Token are equivalent."
        },
        {
            "text": "$p_{\\text{RAG-Token}}(y|x) \\approx \\prod_{i}^{N} \\sum_{z \\in \\text{top-}k(p(\\cdot|x))} p_{\\eta}(z|x) p_{\\theta}(y_i|x, z, y_{1:i-1})$",
            "page": 3,
            "x": 179,
            "y": 360,
            "width": 253,
            "height": 36,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "4-models",
            "chunk_id": "5a69eb3c-c6cf-4625-b7b4-70b89e42b4b1",
            "group_text": "2.1  Models\n\n**RAG-Sequence Model**   The RAG-Sequence model uses the same retrieved document to generate the complete *sequence*. Technically, it treats the retrieved document as a single latent variable that is marginalized to get the seq2seq probability $p(y|x)$ via a top-K approximation. Concretely, the top K documents are retrieved using the retriever, and the generator produces the output sequence probability for each document, which are then marginalized,\n\n$p_{\\text{RAG-Sequence}}(y|x) \\approx \\sum_{z \\in \\text{top-}k(p(\\cdot|x))} p_\\eta(z|x) p_\\theta(y|x, z) = \\sum_{z \\in \\text{top-}k(p(\\cdot|x))} p_\\eta(z|x) \\prod_{i}^{N} p_\\theta(y_i|x, z, y_{1:i-1})$\n\n**RAG-Token Model**   In the RAG-Token model we can draw a different latent document for each target *token* and marginalize accordingly. This allows the generator to choose content from several documents when producing an answer. Concretely, the top K documents are retrieved using the retriever, and then the generator produces a distribution for the next output token for each document, before marginalizing, and repeating the process with the following output token. Formally, we define:\n\n$p_{\\text{RAG-Token}}(y|x) \\approx \\prod_{i}^{N} \\sum_{z \\in \\text{top-}k(p(\\cdot|x))} p_{\\eta}(z|x) p_{\\theta}(y_i|x, z, y_{1:i-1})$\n\nFinally, we note that RAG can be used for sequence classification tasks by considering the target class as a target sequence of length one, in which case RAG-Sequence and RAG-Token are equivalent."
        },
        {
            "text": "Finally, we note that RAG can be used for sequence classification tasks by considering the target class as a target sequence of length one, in which case RAG-Sequence and RAG-Token are equivalent.",
            "page": 3,
            "x": 104,
            "y": 401,
            "width": 401,
            "height": 27,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "4-models",
            "chunk_id": "d1a5cbda-330e-48c3-8970-d24205dbd0a0",
            "group_text": "2.1  Models\n\n**RAG-Sequence Model**   The RAG-Sequence model uses the same retrieved document to generate the complete *sequence*. Technically, it treats the retrieved document as a single latent variable that is marginalized to get the seq2seq probability $p(y|x)$ via a top-K approximation. Concretely, the top K documents are retrieved using the retriever, and the generator produces the output sequence probability for each document, which are then marginalized,\n\n$p_{\\text{RAG-Sequence}}(y|x) \\approx \\sum_{z \\in \\text{top-}k(p(\\cdot|x))} p_\\eta(z|x) p_\\theta(y|x, z) = \\sum_{z \\in \\text{top-}k(p(\\cdot|x))} p_\\eta(z|x) \\prod_{i}^{N} p_\\theta(y_i|x, z, y_{1:i-1})$\n\n**RAG-Token Model**   In the RAG-Token model we can draw a different latent document for each target *token* and marginalize accordingly. This allows the generator to choose content from several documents when producing an answer. Concretely, the top K documents are retrieved using the retriever, and then the generator produces a distribution for the next output token for each document, before marginalizing, and repeating the process with the following output token. Formally, we define:\n\n$p_{\\text{RAG-Token}}(y|x) \\approx \\prod_{i}^{N} \\sum_{z \\in \\text{top-}k(p(\\cdot|x))} p_{\\eta}(z|x) p_{\\theta}(y_i|x, z, y_{1:i-1})$\n\nFinally, we note that RAG can be used for sequence classification tasks by considering the target class as a target sequence of length one, in which case RAG-Sequence and RAG-Token are equivalent."
        },
        {
            "text": "## 2.2  Retriever: DPR\n\nThe retrieval component $p_{\\eta}(z|x)$ is based on DPR [26]. DPR follows a bi-encoder architecture:\n$ p_{\\eta}(z|x) \\propto \\exp \\left( \\mathbf{d}(z)^{\\top} \\mathbf{q}(x) \\right) \\qquad \\mathbf{d}(z) = \\mathrm{BERT}_d(z), \\quad \\mathbf{q}(x) = \\mathrm{BERT}_q(x) $",
            "page": 3,
            "x": 104,
            "y": 436,
            "width": 386,
            "height": 53,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "5-retriever",
            "chunk_id": "936a7ca6-2bd2-4f83-88c9-406d4f189989",
            "group_text": "## 2.2  Retriever: DPR\n\nThe retrieval component $p_{\\eta}(z|x)$ is based on DPR [26]. DPR follows a bi-encoder architecture:\n$ p_{\\eta}(z|x) \\propto \\exp \\left( \\mathbf{d}(z)^{\\top} \\mathbf{q}(x) \\right) \\qquad \\mathbf{d}(z) = \\mathrm{BERT}_d(z), \\quad \\mathbf{q}(x) = \\mathrm{BERT}_q(x) $\n\nwhere d(z) is a dense representation of a document produced by a BERT\\(_\\text{BASE}\\) *document encoder* [8], and q(x) a query representation produced by a *query encoder*, also based on BERT\\(_\\text{BASE}\\). Calculating top-k(\\(p_n(\\cdot|x)\\)), the list of k documents z with highest prior probability \\(p_n(z|x)\\), is a Maximum Inner Product Search (MIPS) problem, which can be approximately solved in sub-linear time [23]. We use a pre-trained bi-encoder from DPR to initialize our retriever and to build the document index. This retriever was trained to retrieve documents which contain answers to TriviaQA [24] questions and Natural Questions [29]. We refer to the document index as the *non-parametric memory*."
        },
        {
            "text": "where d(z) is a dense representation of a document produced by a BERT\\(_\\text{BASE}\\) *document encoder* [8], and q(x) a query representation produced by a *query encoder*, also based on BERT\\(_\\text{BASE}\\). Calculating top-k(\\(p_n(\\cdot|x)\\)), the list of k documents z with highest prior probability \\(p_n(z|x)\\), is a Maximum Inner Product Search (MIPS) problem, which can be approximately solved in sub-linear time [23]. We use a pre-trained bi-encoder from DPR to initialize our retriever and to build the document index. This retriever was trained to retrieve documents which contain answers to TriviaQA [24] questions and Natural Questions [29]. We refer to the document index as the *non-parametric memory*.",
            "page": 3,
            "x": 104,
            "y": 491,
            "width": 403,
            "height": 79,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "5-retriever",
            "chunk_id": "311a35c6-24e2-4a55-9c76-918c1f2bd420",
            "group_text": "## 2.2  Retriever: DPR\n\nThe retrieval component $p_{\\eta}(z|x)$ is based on DPR [26]. DPR follows a bi-encoder architecture:\n$ p_{\\eta}(z|x) \\propto \\exp \\left( \\mathbf{d}(z)^{\\top} \\mathbf{q}(x) \\right) \\qquad \\mathbf{d}(z) = \\mathrm{BERT}_d(z), \\quad \\mathbf{q}(x) = \\mathrm{BERT}_q(x) $\n\nwhere d(z) is a dense representation of a document produced by a BERT\\(_\\text{BASE}\\) *document encoder* [8], and q(x) a query representation produced by a *query encoder*, also based on BERT\\(_\\text{BASE}\\). Calculating top-k(\\(p_n(\\cdot|x)\\)), the list of k documents z with highest prior probability \\(p_n(z|x)\\), is a Maximum Inner Product Search (MIPS) problem, which can be approximately solved in sub-linear time [23]. We use a pre-trained bi-encoder from DPR to initialize our retriever and to build the document index. This retriever was trained to retrieve documents which contain answers to TriviaQA [24] questions and Natural Questions [29]. We refer to the document index as the *non-parametric memory*."
        },
        {
            "text": "## 2.3 Generator: BART\n\nThe generator component $p_\\theta(y_i|x, z, y_{1:i-1})$ could be modelled using any encoder-decoder. We use BART-large [32], a pre-trained seq2seq transformer [58] with 400M parameters. To combine the input $x$ with the retrieved content $z$ when generating from BART, we simply concatenate them. BART was pre-trained using a denoising objective and a variety of different noising functions. It has obtained state-of-the-art results on a diverse set of generation tasks and outperforms comparably-sized T5 models [32]. We refer to the BART generator parameters $\\theta$ as the _parametric memory_ henceforth.",
            "page": 3,
            "x": 104,
            "y": 579,
            "width": 403,
            "height": 90,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "6-generator",
            "chunk_id": "f5567848-82f5-4a6b-9687-2bbbe5c50bbd",
            "group_text": "## 2.3 Generator: BART\n\nThe generator component $p_\\theta(y_i|x, z, y_{1:i-1})$ could be modelled using any encoder-decoder. We use BART-large [32], a pre-trained seq2seq transformer [58] with 400M parameters. To combine the input $x$ with the retrieved content $z$ when generating from BART, we simply concatenate them. BART was pre-trained using a denoising objective and a variety of different noising functions. It has obtained state-of-the-art results on a diverse set of generation tasks and outperforms comparably-sized T5 models [32]. We refer to the BART generator parameters $\\theta$ as the _parametric memory_ henceforth."
        },
        {
            "text": "## 2.4 Training\n\nWe jointly train the retriever and generator components without any direct supervision on what document should be retrieved. Given a fine-tuning training corpus of input/output pairs $(x_j, y_j)$, we",
            "page": 3,
            "x": 104,
            "y": 679,
            "width": 403,
            "height": 46,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "7-training",
            "chunk_id": "8500246b-4b56-4e07-9846-d8bfb0f4eb2c",
            "group_text": "## 2.4 Training\n\nWe jointly train the retriever and generator components without any direct supervision on what document should be retrieved. Given a fine-tuning training corpus of input/output pairs $(x_j, y_j)$, we\n\nminimize the negative marginal log-likelihood of each target, $\\sum_j -\\log p(y_j|x_j)$ using stochastic gradient descent with Adam [28]. Updating the document encoder BERT$_d$ during training is costly as it requires the document index to be periodically updated as REALM does during pre-training [20]. We do not find this step necessary for strong performance, and keep the document encoder (and index) fixed, only fine-tuning the query encoder BERT$_q$ and the BART generator.\n\n**2.5   Decoding**\n\nAt test time, RAG-Sequence and RAG-Token require different ways to approximate $\\arg\\max_y p(y|x)$.\n\n**RAG-Token**   The RAG-Token model can be seen as a standard, autoregressive seq2seq generator with transition probability: $p'_\\theta(y_i|x, y_{1:i-1}) = \\sum_{z_i \\in \\text{top-k}(p(\\cdot|x))} p_n(z_i|x) p_\\theta(y_i|x, z_i, y_{1:i-1})$ To decode, we can plug $p'_\\theta(y_i|x, y_{1:i-1})$ into a standard beam decoder.\n\n**RAG-Sequence**   For RAG-Sequence, the likelihood $p(y|x)$ does not break into a conventional per-token likelihood, hence we cannot solve it with a single beam search. Instead, we run beam search for each document $z$, scoring each hypothesis using $p_\\theta(y_i|x, z, y_{1:i-1})$. This yields a set of hypotheses $Y$, some of which may not have appeared in the beams of all documents. To estimate the probability of an hypothesis $y$ we run an additional forward pass for each document $z$ for which $y$ does not appear in the beam, multiply generator probability with $p_n(z|x)$ and then sum the probabilities across beams for the marginals. We refer to this decoding procedure as \u201cThorough Decoding.\u201d For longer output sequences, $|Y|$ can become large, requiring many forward passes. For more efficient decoding, we can make a further approximation that $p_\\theta(y|x, z_i) \\approx 0$ where $y$ was not generated during beam search from $x, z_i$. This avoids the need to run additional forward passes once the candidate set $Y$ has been generated. We refer to this decoding procedure as \u201cFast Decoding.\u201d"
        },
        {
            "text": "minimize the negative marginal log-likelihood of each target, $\\sum_j -\\log p(y_j|x_j)$ using stochastic gradient descent with Adam [28]. Updating the document encoder BERT$_d$ during training is costly as it requires the document index to be periodically updated as REALM does during pre-training [20]. We do not find this step necessary for strong performance, and keep the document encoder (and index) fixed, only fine-tuning the query encoder BERT$_q$ and the BART generator.",
            "page": 4,
            "x": 103,
            "y": 71,
            "width": 405,
            "height": 61,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "7-training",
            "chunk_id": "f5640595-3228-406b-8011-d195a528697d",
            "group_text": "## 2.4 Training\n\nWe jointly train the retriever and generator components without any direct supervision on what document should be retrieved. Given a fine-tuning training corpus of input/output pairs $(x_j, y_j)$, we\n\nminimize the negative marginal log-likelihood of each target, $\\sum_j -\\log p(y_j|x_j)$ using stochastic gradient descent with Adam [28]. Updating the document encoder BERT$_d$ during training is costly as it requires the document index to be periodically updated as REALM does during pre-training [20]. We do not find this step necessary for strong performance, and keep the document encoder (and index) fixed, only fine-tuning the query encoder BERT$_q$ and the BART generator.\n\n**2.5   Decoding**\n\nAt test time, RAG-Sequence and RAG-Token require different ways to approximate $\\arg\\max_y p(y|x)$.\n\n**RAG-Token**   The RAG-Token model can be seen as a standard, autoregressive seq2seq generator with transition probability: $p'_\\theta(y_i|x, y_{1:i-1}) = \\sum_{z_i \\in \\text{top-k}(p(\\cdot|x))} p_n(z_i|x) p_\\theta(y_i|x, z_i, y_{1:i-1})$ To decode, we can plug $p'_\\theta(y_i|x, y_{1:i-1})$ into a standard beam decoder.\n\n**RAG-Sequence**   For RAG-Sequence, the likelihood $p(y|x)$ does not break into a conventional per-token likelihood, hence we cannot solve it with a single beam search. Instead, we run beam search for each document $z$, scoring each hypothesis using $p_\\theta(y_i|x, z, y_{1:i-1})$. This yields a set of hypotheses $Y$, some of which may not have appeared in the beams of all documents. To estimate the probability of an hypothesis $y$ we run an additional forward pass for each document $z$ for which $y$ does not appear in the beam, multiply generator probability with $p_n(z|x)$ and then sum the probabilities across beams for the marginals. We refer to this decoding procedure as \u201cThorough Decoding.\u201d For longer output sequences, $|Y|$ can become large, requiring many forward passes. For more efficient decoding, we can make a further approximation that $p_\\theta(y|x, z_i) \\approx 0$ where $y$ was not generated during beam search from $x, z_i$. This avoids the need to run additional forward passes once the candidate set $Y$ has been generated. We refer to this decoding procedure as \u201cFast Decoding.\u201d"
        },
        {
            "text": "**2.5   Decoding**\n\nAt test time, RAG-Sequence and RAG-Token require different ways to approximate $\\arg\\max_y p(y|x)$.",
            "page": 4,
            "x": 104,
            "y": 140,
            "width": 404,
            "height": 37,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "7-training",
            "chunk_id": "ede26148-3740-4257-aa56-97ac7dee9f17",
            "group_text": "## 2.4 Training\n\nWe jointly train the retriever and generator components without any direct supervision on what document should be retrieved. Given a fine-tuning training corpus of input/output pairs $(x_j, y_j)$, we\n\nminimize the negative marginal log-likelihood of each target, $\\sum_j -\\log p(y_j|x_j)$ using stochastic gradient descent with Adam [28]. Updating the document encoder BERT$_d$ during training is costly as it requires the document index to be periodically updated as REALM does during pre-training [20]. We do not find this step necessary for strong performance, and keep the document encoder (and index) fixed, only fine-tuning the query encoder BERT$_q$ and the BART generator.\n\n**2.5   Decoding**\n\nAt test time, RAG-Sequence and RAG-Token require different ways to approximate $\\arg\\max_y p(y|x)$.\n\n**RAG-Token**   The RAG-Token model can be seen as a standard, autoregressive seq2seq generator with transition probability: $p'_\\theta(y_i|x, y_{1:i-1}) = \\sum_{z_i \\in \\text{top-k}(p(\\cdot|x))} p_n(z_i|x) p_\\theta(y_i|x, z_i, y_{1:i-1})$ To decode, we can plug $p'_\\theta(y_i|x, y_{1:i-1})$ into a standard beam decoder.\n\n**RAG-Sequence**   For RAG-Sequence, the likelihood $p(y|x)$ does not break into a conventional per-token likelihood, hence we cannot solve it with a single beam search. Instead, we run beam search for each document $z$, scoring each hypothesis using $p_\\theta(y_i|x, z, y_{1:i-1})$. This yields a set of hypotheses $Y$, some of which may not have appeared in the beams of all documents. To estimate the probability of an hypothesis $y$ we run an additional forward pass for each document $z$ for which $y$ does not appear in the beam, multiply generator probability with $p_n(z|x)$ and then sum the probabilities across beams for the marginals. We refer to this decoding procedure as \u201cThorough Decoding.\u201d For longer output sequences, $|Y|$ can become large, requiring many forward passes. For more efficient decoding, we can make a further approximation that $p_\\theta(y|x, z_i) \\approx 0$ where $y$ was not generated during beam search from $x, z_i$. This avoids the need to run additional forward passes once the candidate set $Y$ has been generated. We refer to this decoding procedure as \u201cFast Decoding.\u201d"
        },
        {
            "text": "**RAG-Token**   The RAG-Token model can be seen as a standard, autoregressive seq2seq generator with transition probability: $p'_\\theta(y_i|x, y_{1:i-1}) = \\sum_{z_i \\in \\text{top-k}(p(\\cdot|x))} p_n(z_i|x) p_\\theta(y_i|x, z_i, y_{1:i-1})$ To decode, we can plug $p'_\\theta(y_i|x, y_{1:i-1})$ into a standard beam decoder.",
            "page": 4,
            "x": 104,
            "y": 183,
            "width": 404,
            "height": 40,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "7-training",
            "chunk_id": "8a720792-e2bb-4caf-ab75-5bd817e126c4",
            "group_text": "## 2.4 Training\n\nWe jointly train the retriever and generator components without any direct supervision on what document should be retrieved. Given a fine-tuning training corpus of input/output pairs $(x_j, y_j)$, we\n\nminimize the negative marginal log-likelihood of each target, $\\sum_j -\\log p(y_j|x_j)$ using stochastic gradient descent with Adam [28]. Updating the document encoder BERT$_d$ during training is costly as it requires the document index to be periodically updated as REALM does during pre-training [20]. We do not find this step necessary for strong performance, and keep the document encoder (and index) fixed, only fine-tuning the query encoder BERT$_q$ and the BART generator.\n\n**2.5   Decoding**\n\nAt test time, RAG-Sequence and RAG-Token require different ways to approximate $\\arg\\max_y p(y|x)$.\n\n**RAG-Token**   The RAG-Token model can be seen as a standard, autoregressive seq2seq generator with transition probability: $p'_\\theta(y_i|x, y_{1:i-1}) = \\sum_{z_i \\in \\text{top-k}(p(\\cdot|x))} p_n(z_i|x) p_\\theta(y_i|x, z_i, y_{1:i-1})$ To decode, we can plug $p'_\\theta(y_i|x, y_{1:i-1})$ into a standard beam decoder.\n\n**RAG-Sequence**   For RAG-Sequence, the likelihood $p(y|x)$ does not break into a conventional per-token likelihood, hence we cannot solve it with a single beam search. Instead, we run beam search for each document $z$, scoring each hypothesis using $p_\\theta(y_i|x, z, y_{1:i-1})$. This yields a set of hypotheses $Y$, some of which may not have appeared in the beams of all documents. To estimate the probability of an hypothesis $y$ we run an additional forward pass for each document $z$ for which $y$ does not appear in the beam, multiply generator probability with $p_n(z|x)$ and then sum the probabilities across beams for the marginals. We refer to this decoding procedure as \u201cThorough Decoding.\u201d For longer output sequences, $|Y|$ can become large, requiring many forward passes. For more efficient decoding, we can make a further approximation that $p_\\theta(y|x, z_i) \\approx 0$ where $y$ was not generated during beam search from $x, z_i$. This avoids the need to run additional forward passes once the candidate set $Y$ has been generated. We refer to this decoding procedure as \u201cFast Decoding.\u201d"
        },
        {
            "text": "**RAG-Sequence**   For RAG-Sequence, the likelihood $p(y|x)$ does not break into a conventional per-token likelihood, hence we cannot solve it with a single beam search. Instead, we run beam search for each document $z$, scoring each hypothesis using $p_\\theta(y_i|x, z, y_{1:i-1})$. This yields a set of hypotheses $Y$, some of which may not have appeared in the beams of all documents. To estimate the probability of an hypothesis $y$ we run an additional forward pass for each document $z$ for which $y$ does not appear in the beam, multiply generator probability with $p_n(z|x)$ and then sum the probabilities across beams for the marginals. We refer to this decoding procedure as \u201cThorough Decoding.\u201d For longer output sequences, $|Y|$ can become large, requiring many forward passes. For more efficient decoding, we can make a further approximation that $p_\\theta(y|x, z_i) \\approx 0$ where $y$ was not generated during beam search from $x, z_i$. This avoids the need to run additional forward passes once the candidate set $Y$ has been generated. We refer to this decoding procedure as \u201cFast Decoding.\u201d",
            "page": 4,
            "x": 104,
            "y": 230,
            "width": 404,
            "height": 124,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "7-training",
            "chunk_id": "6f4d5a05-93f5-405d-915d-5ffe0c7e5424",
            "group_text": "## 2.4 Training\n\nWe jointly train the retriever and generator components without any direct supervision on what document should be retrieved. Given a fine-tuning training corpus of input/output pairs $(x_j, y_j)$, we\n\nminimize the negative marginal log-likelihood of each target, $\\sum_j -\\log p(y_j|x_j)$ using stochastic gradient descent with Adam [28]. Updating the document encoder BERT$_d$ during training is costly as it requires the document index to be periodically updated as REALM does during pre-training [20]. We do not find this step necessary for strong performance, and keep the document encoder (and index) fixed, only fine-tuning the query encoder BERT$_q$ and the BART generator.\n\n**2.5   Decoding**\n\nAt test time, RAG-Sequence and RAG-Token require different ways to approximate $\\arg\\max_y p(y|x)$.\n\n**RAG-Token**   The RAG-Token model can be seen as a standard, autoregressive seq2seq generator with transition probability: $p'_\\theta(y_i|x, y_{1:i-1}) = \\sum_{z_i \\in \\text{top-k}(p(\\cdot|x))} p_n(z_i|x) p_\\theta(y_i|x, z_i, y_{1:i-1})$ To decode, we can plug $p'_\\theta(y_i|x, y_{1:i-1})$ into a standard beam decoder.\n\n**RAG-Sequence**   For RAG-Sequence, the likelihood $p(y|x)$ does not break into a conventional per-token likelihood, hence we cannot solve it with a single beam search. Instead, we run beam search for each document $z$, scoring each hypothesis using $p_\\theta(y_i|x, z, y_{1:i-1})$. This yields a set of hypotheses $Y$, some of which may not have appeared in the beams of all documents. To estimate the probability of an hypothesis $y$ we run an additional forward pass for each document $z$ for which $y$ does not appear in the beam, multiply generator probability with $p_n(z|x)$ and then sum the probabilities across beams for the marginals. We refer to this decoding procedure as \u201cThorough Decoding.\u201d For longer output sequences, $|Y|$ can become large, requiring many forward passes. For more efficient decoding, we can make a further approximation that $p_\\theta(y|x, z_i) \\approx 0$ where $y$ was not generated during beam search from $x, z_i$. This avoids the need to run additional forward passes once the candidate set $Y$ has been generated. We refer to this decoding procedure as \u201cFast Decoding.\u201d"
        },
        {
            "text": "## 3 Experiments\n\nWe experiment with RAG in a wide range of knowledge-intensive tasks. For all experiments, we use a single Wikipedia dump for our non-parametric knowledge source. Following Lee et al. [31] and Karpukhin et al. [26], we use the December 2018 dump. Each Wikipedia article is split into disjoint 100-word chunks, to make a total of 21M documents. We use the document encoder to compute an embedding for each document, and build a single MIPS index using FAISS [23] with a Hierarchical Navigable Small World approximation for fast retrieval [37]. During training, we retrieve the top $k$ documents for each query. We consider $k \\in \\{5, 10\\}$ for training and set $k$ for test time using dev data. We now discuss experimental details for each task.",
            "page": 4,
            "x": 103,
            "y": 366,
            "width": 404,
            "height": 116,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "8-experiments",
            "chunk_id": "f21fbb65-1d05-4a64-9117-0c8c8fe74a55",
            "group_text": "## 3 Experiments\n\nWe experiment with RAG in a wide range of knowledge-intensive tasks. For all experiments, we use a single Wikipedia dump for our non-parametric knowledge source. Following Lee et al. [31] and Karpukhin et al. [26], we use the December 2018 dump. Each Wikipedia article is split into disjoint 100-word chunks, to make a total of 21M documents. We use the document encoder to compute an embedding for each document, and build a single MIPS index using FAISS [23] with a Hierarchical Navigable Small World approximation for fast retrieval [37]. During training, we retrieve the top $k$ documents for each query. We consider $k \\in \\{5, 10\\}$ for training and set $k$ for test time using dev data. We now discuss experimental details for each task."
        },
        {
            "text": "### 3.1 Open-domain Question Answering\n\nOpen-domain question answering (QA) is an important real-world application and common testbed for knowledge-intensive tasks [20]. We treat questions and answers as input-output text pairs $(x, y)$ and train RAG by directly minimizing the negative log-likelihood of answers. We compare RAG to the popular extractive QA paradigm [5, 7, 31, 26], where answers are extracted spans from retrieved documents, relying primarily on non-parametric knowledge. We also compare to \u201cClosed-Book QA\u201d approaches [52], which, like RAG, generate answers, but which do not exploit retrieval, instead relying purely on parametric knowledge. We consider four popular open-domain QA datasets: Natural Questions (NQ) [29], TriviaQA (TQA) [24], WebQuestions (WQ) [3] and CuratedTrec (CT) [2]. As CT and WQ are small, we follow DPR [26] by initializing CT and WQ models with our NQ RAG model. We use the same train/dev/test splits as prior work [31, 26] and report Exact Match (EM) scores. For TQA, to compare with T5 [52], we also evaluate on the TQA Wiki test set.",
            "page": 4,
            "x": 103,
            "y": 492,
            "width": 404,
            "height": 144,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "9-open",
            "chunk_id": "31c65c0e-11b5-4971-9df3-1dbb9fac6567",
            "group_text": "### 3.1 Open-domain Question Answering\n\nOpen-domain question answering (QA) is an important real-world application and common testbed for knowledge-intensive tasks [20]. We treat questions and answers as input-output text pairs $(x, y)$ and train RAG by directly minimizing the negative log-likelihood of answers. We compare RAG to the popular extractive QA paradigm [5, 7, 31, 26], where answers are extracted spans from retrieved documents, relying primarily on non-parametric knowledge. We also compare to \u201cClosed-Book QA\u201d approaches [52], which, like RAG, generate answers, but which do not exploit retrieval, instead relying purely on parametric knowledge. We consider four popular open-domain QA datasets: Natural Questions (NQ) [29], TriviaQA (TQA) [24], WebQuestions (WQ) [3] and CuratedTrec (CT) [2]. As CT and WQ are small, we follow DPR [26] by initializing CT and WQ models with our NQ RAG model. We use the same train/dev/test splits as prior work [31, 26] and report Exact Match (EM) scores. For TQA, to compare with T5 [52], we also evaluate on the TQA Wiki test set."
        },
        {
            "text": "3.2  Abstractive Question Answering\n\nRAG models can go beyond simple extractive QA and answer questions with free-form, abstractive text generation. To test RAG\u2019s natural language generation (NLG) in a knowledge-intensive setting, we use the MSMARCO NLG task v2.1 [43]. The task consists of questions, ten gold passages retrieved from a search engine for each question, and a full sentence answer annotated from the retrieved passages. We do not use the supplied passages, only the questions and answers, to treat",
            "page": 4,
            "x": 103,
            "y": 645,
            "width": 404,
            "height": 79,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "10-abstractive",
            "chunk_id": "fe506f25-e8dc-456e-9085-15c86a51454d",
            "group_text": "3.2  Abstractive Question Answering\n\nRAG models can go beyond simple extractive QA and answer questions with free-form, abstractive text generation. To test RAG\u2019s natural language generation (NLG) in a knowledge-intensive setting, we use the MSMARCO NLG task v2.1 [43]. The task consists of questions, ten gold passages retrieved from a search engine for each question, and a full sentence answer annotated from the retrieved passages. We do not use the supplied passages, only the questions and answers, to treat\n\nMSMARCO as an open-domain abstractive QA task. MSMARCO has some questions that cannot be answered in a way that matches the reference answer without access to the gold passages, such as \u201cWhat is the weather in Volcano, CA?\u201d so performance will be lower without using gold passages. We also note that some MSMARCO questions cannot be answered using Wikipedia alone. Here, RAG can rely on parametric knowledge to generate reasonable responses."
        },
        {
            "text": "MSMARCO as an open-domain abstractive QA task. MSMARCO has some questions that cannot be answered in a way that matches the reference answer without access to the gold passages, such as \u201cWhat is the weather in Volcano, CA?\u201d so performance will be lower without using gold passages. We also note that some MSMARCO questions cannot be answered using Wikipedia alone. Here, RAG can rely on parametric knowledge to generate reasonable responses.",
            "page": 5,
            "x": 103,
            "y": 70,
            "width": 406,
            "height": 60,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "10-abstractive",
            "chunk_id": "6e9d1919-11d9-4477-add8-7a1b29bdc7f7",
            "group_text": "3.2  Abstractive Question Answering\n\nRAG models can go beyond simple extractive QA and answer questions with free-form, abstractive text generation. To test RAG\u2019s natural language generation (NLG) in a knowledge-intensive setting, we use the MSMARCO NLG task v2.1 [43]. The task consists of questions, ten gold passages retrieved from a search engine for each question, and a full sentence answer annotated from the retrieved passages. We do not use the supplied passages, only the questions and answers, to treat\n\nMSMARCO as an open-domain abstractive QA task. MSMARCO has some questions that cannot be answered in a way that matches the reference answer without access to the gold passages, such as \u201cWhat is the weather in Volcano, CA?\u201d so performance will be lower without using gold passages. We also note that some MSMARCO questions cannot be answered using Wikipedia alone. Here, RAG can rely on parametric knowledge to generate reasonable responses."
        },
        {
            "text": "3.3  Jeopardy Question Generation\n\nTo evaluate RAG\u2019s generation abilities in a non-QA setting, we study open-domain question generation. Rather than use questions from standard open-domain QA tasks, which typically consist of short, simple questions, we propose the more demanding task of generating Jeopardy questions. Jeopardy is an unusual format that consists of trying to guess an entity from a fact about that entity. For example, \u201cThe World Cup\u201d is the answer to the question \u201cIn 1986 Mexico scored as the first country to host this international sports competition twice.\u201d As Jeopardy questions are precise, factual statements, generating Jeopardy questions conditioned on their answer entities constitutes a challenging knowledge-intensive generation task.",
            "page": 5,
            "x": 103,
            "y": 138,
            "width": 405,
            "height": 111,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "11-jeopardy",
            "chunk_id": "a632a590-c10f-4287-8f1a-8ddb5687e047",
            "group_text": "3.3  Jeopardy Question Generation\n\nTo evaluate RAG\u2019s generation abilities in a non-QA setting, we study open-domain question generation. Rather than use questions from standard open-domain QA tasks, which typically consist of short, simple questions, we propose the more demanding task of generating Jeopardy questions. Jeopardy is an unusual format that consists of trying to guess an entity from a fact about that entity. For example, \u201cThe World Cup\u201d is the answer to the question \u201cIn 1986 Mexico scored as the first country to host this international sports competition twice.\u201d As Jeopardy questions are precise, factual statements, generating Jeopardy questions conditioned on their answer entities constitutes a challenging knowledge-intensive generation task.\n\nWe use the splits from SearchQA [10], with 100K train, 14K dev, and 27K test examples. As this is a new task, we train a BART model for comparison. Following [67], we evaluate using the SQuAD-tuned Q-BLEU-1 metric [42]. Q-BLEU is a variant of BLEU with a higher weight for matching entities and has higher correlation with human judgment for question generation than standard metrics. We also perform two human evaluations, one to assess generation factuality, and one for specificity. We define factuality as whether a statement can be corroborated by trusted external sources, and specificity as high mutual dependence between the input and output [33]. We follow best practice and use pairwise comparative evaluation [34]. Evaluators are shown an answer and two generated questions, one from BART and one from RAG. They are then asked to pick one of four options\u2014question A is better, question B is better, both are good, or neither is good."
        },
        {
            "text": "We use the splits from SearchQA [10], with 100K train, 14K dev, and 27K test examples. As this is a new task, we train a BART model for comparison. Following [67], we evaluate using the SQuAD-tuned Q-BLEU-1 metric [42]. Q-BLEU is a variant of BLEU with a higher weight for matching entities and has higher correlation with human judgment for question generation than standard metrics. We also perform two human evaluations, one to assess generation factuality, and one for specificity. We define factuality as whether a statement can be corroborated by trusted external sources, and specificity as high mutual dependence between the input and output [33]. We follow best practice and use pairwise comparative evaluation [34]. Evaluators are shown an answer and two generated questions, one from BART and one from RAG. They are then asked to pick one of four options\u2014question A is better, question B is better, both are good, or neither is good.",
            "page": 5,
            "x": 104,
            "y": 251,
            "width": 404,
            "height": 114,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "11-jeopardy",
            "chunk_id": "d270f248-a357-4fbc-86e6-b826c81da1e4",
            "group_text": "3.3  Jeopardy Question Generation\n\nTo evaluate RAG\u2019s generation abilities in a non-QA setting, we study open-domain question generation. Rather than use questions from standard open-domain QA tasks, which typically consist of short, simple questions, we propose the more demanding task of generating Jeopardy questions. Jeopardy is an unusual format that consists of trying to guess an entity from a fact about that entity. For example, \u201cThe World Cup\u201d is the answer to the question \u201cIn 1986 Mexico scored as the first country to host this international sports competition twice.\u201d As Jeopardy questions are precise, factual statements, generating Jeopardy questions conditioned on their answer entities constitutes a challenging knowledge-intensive generation task.\n\nWe use the splits from SearchQA [10], with 100K train, 14K dev, and 27K test examples. As this is a new task, we train a BART model for comparison. Following [67], we evaluate using the SQuAD-tuned Q-BLEU-1 metric [42]. Q-BLEU is a variant of BLEU with a higher weight for matching entities and has higher correlation with human judgment for question generation than standard metrics. We also perform two human evaluations, one to assess generation factuality, and one for specificity. We define factuality as whether a statement can be corroborated by trusted external sources, and specificity as high mutual dependence between the input and output [33]. We follow best practice and use pairwise comparative evaluation [34]. Evaluators are shown an answer and two generated questions, one from BART and one from RAG. They are then asked to pick one of four options\u2014question A is better, question B is better, both are good, or neither is good."
        },
        {
            "text": "3.4 Fact Verification\n\nFEVER [56] requires classifying whether a natural language claim is supported or refuted by Wikipedia, or whether there is not enough information to decide. The task requires retrieving evidence from Wikipedia relating to the claim and then reasoning over this evidence to classify whether the claim is true, false, or unverifiable from Wikipedia alone. FEVER is a retrieval problem coupled with an challenging entailment reasoning task. It also provides an appropriate testbed for exploring the RAG models\u2019 ability to handle classification rather than generation. We map FEVER class labels (supports, refutes, or not enough info) to single output tokens and directly train with claim-class pairs. Crucially, unlike most other approaches to FEVER, we do not use supervision on retrieved evidence. In many real-world applications, retrieval supervision signals aren\u2019t available, and models that do not require such supervision will be applicable to a wider range of tasks. We explore two variants: the standard 3-way classification task (supports/refutes/not enough info) and the 2-way (supports/refutes) task studied in Thorne and Vlachos [57]. In both cases we report label accuracy.",
            "page": 5,
            "x": 103,
            "y": 373,
            "width": 405,
            "height": 157,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "12-fact",
            "chunk_id": "b535e27f-2af2-49be-8a46-4d8045c31ea0",
            "group_text": "3.4 Fact Verification\n\nFEVER [56] requires classifying whether a natural language claim is supported or refuted by Wikipedia, or whether there is not enough information to decide. The task requires retrieving evidence from Wikipedia relating to the claim and then reasoning over this evidence to classify whether the claim is true, false, or unverifiable from Wikipedia alone. FEVER is a retrieval problem coupled with an challenging entailment reasoning task. It also provides an appropriate testbed for exploring the RAG models\u2019 ability to handle classification rather than generation. We map FEVER class labels (supports, refutes, or not enough info) to single output tokens and directly train with claim-class pairs. Crucially, unlike most other approaches to FEVER, we do not use supervision on retrieved evidence. In many real-world applications, retrieval supervision signals aren\u2019t available, and models that do not require such supervision will be applicable to a wider range of tasks. We explore two variants: the standard 3-way classification task (supports/refutes/not enough info) and the 2-way (supports/refutes) task studied in Thorne and Vlachos [57]. In both cases we report label accuracy."
        },
        {
            "text": "4  Results\n\n4.1  Open-domain Question Answering\n\nTable 1 shows results for RAG along with state-of-the-art models. On all four open-domain QA tasks, RAG sets a new state of the art (only on the T5-comparable split for TQA). RAG combines the generation flexibility of the \u201cclosed-book\u201d (parametric only) approaches and the performance of \"open-book\" retrieval-based approaches. Unlike REALM and T5+SSM, RAG enjoys strong results without expensive, specialized \u201csalient span masking\u201d pre-training [20]. It is worth noting that RAG\u2019s retriever is initialized using DPR\u2019s retriever, which uses retrieval supervision on Natural Questions and TriviaQA. RAG compares favourably to the DPR QA system, which uses a BERT-based \u201ccross-encoder\u201d to re-rank documents, along with an extractive reader. RAG demonstrates that neither a re-ranker nor extractive reader is necessary for state-of-the-art performance.",
            "page": 5,
            "x": 103,
            "y": 540,
            "width": 405,
            "height": 145,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "13-results",
            "chunk_id": "73d03d94-f810-4e06-bee0-383e27f52965",
            "group_text": "4  Results\n\n4.1  Open-domain Question Answering\n\nTable 1 shows results for RAG along with state-of-the-art models. On all four open-domain QA tasks, RAG sets a new state of the art (only on the T5-comparable split for TQA). RAG combines the generation flexibility of the \u201cclosed-book\u201d (parametric only) approaches and the performance of \"open-book\" retrieval-based approaches. Unlike REALM and T5+SSM, RAG enjoys strong results without expensive, specialized \u201csalient span masking\u201d pre-training [20]. It is worth noting that RAG\u2019s retriever is initialized using DPR\u2019s retriever, which uses retrieval supervision on Natural Questions and TriviaQA. RAG compares favourably to the DPR QA system, which uses a BERT-based \u201ccross-encoder\u201d to re-rank documents, along with an extractive reader. RAG demonstrates that neither a re-ranker nor extractive reader is necessary for state-of-the-art performance.\n\nThere are several advantages to generating answers even when it is possible to extract them. Documents with clues about the answer but do not contain the answer verbatim can still contribute towards a correct answer being generated, which is not possible with standard extractive approaches, leading\n\nTable 1: Open-Domain QA Test Scores. For TQA, left column uses the standard test set for Open-Domain QA, right column uses the TQA-Wiki test set. See Appendix D for further details.\n\nTable 2: Generation and classification Test Scores.\nMS-MARCO SotA is [4], FEVER-3 is [68] and FEVER-2 is [57] *Uses gold context/evidence.\nBest model without gold access underlined.\n\nto more effective marginalization over documents. Furthermore, RAG can generate correct answers even when the correct answer is not in any retrieved document, achieving 11.8% accuracy in such cases for NQ, where an extractive model would score 0%."
        },
        {
            "text": "There are several advantages to generating answers even when it is possible to extract them. Documents with clues about the answer but do not contain the answer verbatim can still contribute towards a correct answer being generated, which is not possible with standard extractive approaches, leading",
            "page": 5,
            "x": 104,
            "y": 688,
            "width": 405,
            "height": 38,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "13-results",
            "chunk_id": "8d98f4b5-c18e-4645-b981-363067fd6599",
            "group_text": "4  Results\n\n4.1  Open-domain Question Answering\n\nTable 1 shows results for RAG along with state-of-the-art models. On all four open-domain QA tasks, RAG sets a new state of the art (only on the T5-comparable split for TQA). RAG combines the generation flexibility of the \u201cclosed-book\u201d (parametric only) approaches and the performance of \"open-book\" retrieval-based approaches. Unlike REALM and T5+SSM, RAG enjoys strong results without expensive, specialized \u201csalient span masking\u201d pre-training [20]. It is worth noting that RAG\u2019s retriever is initialized using DPR\u2019s retriever, which uses retrieval supervision on Natural Questions and TriviaQA. RAG compares favourably to the DPR QA system, which uses a BERT-based \u201ccross-encoder\u201d to re-rank documents, along with an extractive reader. RAG demonstrates that neither a re-ranker nor extractive reader is necessary for state-of-the-art performance.\n\nThere are several advantages to generating answers even when it is possible to extract them. Documents with clues about the answer but do not contain the answer verbatim can still contribute towards a correct answer being generated, which is not possible with standard extractive approaches, leading\n\nTable 1: Open-Domain QA Test Scores. For TQA, left column uses the standard test set for Open-Domain QA, right column uses the TQA-Wiki test set. See Appendix D for further details.\n\nTable 2: Generation and classification Test Scores.\nMS-MARCO SotA is [4], FEVER-3 is [68] and FEVER-2 is [57] *Uses gold context/evidence.\nBest model without gold access underlined.\n\nto more effective marginalization over documents. Furthermore, RAG can generate correct answers even when the correct answer is not in any retrieved document, achieving 11.8% accuracy in such cases for NQ, where an extractive model would score 0%."
        },
        {
            "text": "Table 1: Open-Domain QA Test Scores. For TQA, left column uses the standard test set for Open-Domain QA, right column uses the TQA-Wiki test set. See Appendix D for further details.",
            "page": 6,
            "x": 104,
            "y": 75,
            "width": 200,
            "height": 47,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "13-results",
            "chunk_id": "79dd2936-444e-4e7a-b74a-ba997cac8637",
            "group_text": "4  Results\n\n4.1  Open-domain Question Answering\n\nTable 1 shows results for RAG along with state-of-the-art models. On all four open-domain QA tasks, RAG sets a new state of the art (only on the T5-comparable split for TQA). RAG combines the generation flexibility of the \u201cclosed-book\u201d (parametric only) approaches and the performance of \"open-book\" retrieval-based approaches. Unlike REALM and T5+SSM, RAG enjoys strong results without expensive, specialized \u201csalient span masking\u201d pre-training [20]. It is worth noting that RAG\u2019s retriever is initialized using DPR\u2019s retriever, which uses retrieval supervision on Natural Questions and TriviaQA. RAG compares favourably to the DPR QA system, which uses a BERT-based \u201ccross-encoder\u201d to re-rank documents, along with an extractive reader. RAG demonstrates that neither a re-ranker nor extractive reader is necessary for state-of-the-art performance.\n\nThere are several advantages to generating answers even when it is possible to extract them. Documents with clues about the answer but do not contain the answer verbatim can still contribute towards a correct answer being generated, which is not possible with standard extractive approaches, leading\n\nTable 1: Open-Domain QA Test Scores. For TQA, left column uses the standard test set for Open-Domain QA, right column uses the TQA-Wiki test set. See Appendix D for further details.\n\nTable 2: Generation and classification Test Scores.\nMS-MARCO SotA is [4], FEVER-3 is [68] and FEVER-2 is [57] *Uses gold context/evidence.\nBest model without gold access underlined.\n\nto more effective marginalization over documents. Furthermore, RAG can generate correct answers even when the correct answer is not in any retrieved document, achieving 11.8% accuracy in such cases for NQ, where an extractive model would score 0%."
        },
        {
            "text": "Table 2: Generation and classification Test Scores.\nMS-MARCO SotA is [4], FEVER-3 is [68] and FEVER-2 is [57] *Uses gold context/evidence.\nBest model without gold access underlined.",
            "page": 6,
            "x": 307,
            "y": 75,
            "width": 201,
            "height": 48,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "13-results",
            "chunk_id": "2675c4d5-c47e-4268-be66-085c214d0a05",
            "group_text": "4  Results\n\n4.1  Open-domain Question Answering\n\nTable 1 shows results for RAG along with state-of-the-art models. On all four open-domain QA tasks, RAG sets a new state of the art (only on the T5-comparable split for TQA). RAG combines the generation flexibility of the \u201cclosed-book\u201d (parametric only) approaches and the performance of \"open-book\" retrieval-based approaches. Unlike REALM and T5+SSM, RAG enjoys strong results without expensive, specialized \u201csalient span masking\u201d pre-training [20]. It is worth noting that RAG\u2019s retriever is initialized using DPR\u2019s retriever, which uses retrieval supervision on Natural Questions and TriviaQA. RAG compares favourably to the DPR QA system, which uses a BERT-based \u201ccross-encoder\u201d to re-rank documents, along with an extractive reader. RAG demonstrates that neither a re-ranker nor extractive reader is necessary for state-of-the-art performance.\n\nThere are several advantages to generating answers even when it is possible to extract them. Documents with clues about the answer but do not contain the answer verbatim can still contribute towards a correct answer being generated, which is not possible with standard extractive approaches, leading\n\nTable 1: Open-Domain QA Test Scores. For TQA, left column uses the standard test set for Open-Domain QA, right column uses the TQA-Wiki test set. See Appendix D for further details.\n\nTable 2: Generation and classification Test Scores.\nMS-MARCO SotA is [4], FEVER-3 is [68] and FEVER-2 is [57] *Uses gold context/evidence.\nBest model without gold access underlined.\n\nto more effective marginalization over documents. Furthermore, RAG can generate correct answers even when the correct answer is not in any retrieved document, achieving 11.8% accuracy in such cases for NQ, where an extractive model would score 0%."
        },
        {
            "text": "to more effective marginalization over documents. Furthermore, RAG can generate correct answers even when the correct answer is not in any retrieved document, achieving 11.8% accuracy in such cases for NQ, where an extractive model would score 0%.",
            "page": 6,
            "x": 103,
            "y": 232,
            "width": 404,
            "height": 37,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "13-results",
            "chunk_id": "c88208ba-e764-46f3-98d6-ecfbeef42042",
            "group_text": "4  Results\n\n4.1  Open-domain Question Answering\n\nTable 1 shows results for RAG along with state-of-the-art models. On all four open-domain QA tasks, RAG sets a new state of the art (only on the T5-comparable split for TQA). RAG combines the generation flexibility of the \u201cclosed-book\u201d (parametric only) approaches and the performance of \"open-book\" retrieval-based approaches. Unlike REALM and T5+SSM, RAG enjoys strong results without expensive, specialized \u201csalient span masking\u201d pre-training [20]. It is worth noting that RAG\u2019s retriever is initialized using DPR\u2019s retriever, which uses retrieval supervision on Natural Questions and TriviaQA. RAG compares favourably to the DPR QA system, which uses a BERT-based \u201ccross-encoder\u201d to re-rank documents, along with an extractive reader. RAG demonstrates that neither a re-ranker nor extractive reader is necessary for state-of-the-art performance.\n\nThere are several advantages to generating answers even when it is possible to extract them. Documents with clues about the answer but do not contain the answer verbatim can still contribute towards a correct answer being generated, which is not possible with standard extractive approaches, leading\n\nTable 1: Open-Domain QA Test Scores. For TQA, left column uses the standard test set for Open-Domain QA, right column uses the TQA-Wiki test set. See Appendix D for further details.\n\nTable 2: Generation and classification Test Scores.\nMS-MARCO SotA is [4], FEVER-3 is [68] and FEVER-2 is [57] *Uses gold context/evidence.\nBest model without gold access underlined.\n\nto more effective marginalization over documents. Furthermore, RAG can generate correct answers even when the correct answer is not in any retrieved document, achieving 11.8% accuracy in such cases for NQ, where an extractive model would score 0%."
        },
        {
            "text": "## 4.2 Abstractive Question Answering\n\nAs shown in Table 2, RAG-Sequence outperforms BART on Open MS-MARCO NLG by 2.6 Bleu points and 2.6 Rouge-L points. RAG approaches state-of-the-art model performance, which is impressive given that (i) those models access gold passages with specific information required to generate the reference answer , (ii) many questions are unanswerable without the gold passages, and (iii) not all questions are answerable from Wikipedia alone. Table 3 shows some generated answers from our models. Qualitatively, we find that RAG models hallucinate less and generate factually correct text more often than BART. Later, we also show that RAG generations are more diverse than BART generations (see \u00a74.5).",
            "page": 6,
            "x": 103,
            "y": 278,
            "width": 405,
            "height": 112,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "14-abstractive",
            "chunk_id": "a2585ca9-1404-477c-be80-f8b7eca6e3ac",
            "group_text": "## 4.2 Abstractive Question Answering\n\nAs shown in Table 2, RAG-Sequence outperforms BART on Open MS-MARCO NLG by 2.6 Bleu points and 2.6 Rouge-L points. RAG approaches state-of-the-art model performance, which is impressive given that (i) those models access gold passages with specific information required to generate the reference answer , (ii) many questions are unanswerable without the gold passages, and (iii) not all questions are answerable from Wikipedia alone. Table 3 shows some generated answers from our models. Qualitatively, we find that RAG models hallucinate less and generate factually correct text more often than BART. Later, we also show that RAG generations are more diverse than BART generations (see \u00a74.5)."
        },
        {
            "text": "### 4.3 Jeopardy Question Generation\n\nTable 2 shows that RAG-Token performs better than RAG-Sequence on Jeopardy question generation, with both models outperforming BART on Q-BLEU-1. 4 shows human evaluation results, over 452 pairs of generations from BART and RAG-Token. Evaluators indicated that BART was more factual than RAG in only 7.1% of cases, while RAG was more factual in 42.7% of cases, and both RAG and BART were factual in a further 17% of cases, clearly demonstrating the effectiveness of RAG on the task over a state-of-the-art generation model. Evaluators also find RAG generations to be more specific by a large margin. Table 3 shows typical generations from each model.",
            "page": 6,
            "x": 103,
            "y": 399,
            "width": 404,
            "height": 100,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "15-jeopardy",
            "chunk_id": "3ce66818-d753-4bb5-8499-f9ee1acdb870",
            "group_text": "### 4.3 Jeopardy Question Generation\n\nTable 2 shows that RAG-Token performs better than RAG-Sequence on Jeopardy question generation, with both models outperforming BART on Q-BLEU-1. 4 shows human evaluation results, over 452 pairs of generations from BART and RAG-Token. Evaluators indicated that BART was more factual than RAG in only 7.1% of cases, while RAG was more factual in 42.7% of cases, and both RAG and BART were factual in a further 17% of cases, clearly demonstrating the effectiveness of RAG on the task over a state-of-the-art generation model. Evaluators also find RAG generations to be more specific by a large margin. Table 3 shows typical generations from each model.\n\nJeopardy questions often contain two separate pieces of information, and RAG-Token may perform best because it can generate responses that combine content from several documents. Figure 2 shows an example. When generating \u201cSun\u201d, the posterior is high for document 2 which mentions \u201cThe Sun Also Rises\u201d. Similarly, document 1 dominates the posterior when \u201cA Farewell to Arms\u201d is generated. Intriguingly, after the first token of each book is generated, the document posterior flattens. This observation suggests that the generator can complete the titles without depending on specific documents. In other words, the model\u2019s parametric knowledge is sufficient to complete the titles. We find evidence for this hypothesis by feeding the BART-only baseline with the partial decoding \"The Sun\". BART completes the generation \"The Sun Also Rises\" is a novel by this author of \"The Sun Also Rises\" indicating the title \"The Sun Also Rises\" is stored in BART\u2019s parameters. Similarly, BART will complete the partial decoding \"The Sun Also Rises\" is a novel by this author of \"A Farewell to Arms\". This example shows how parametric and non-parametric memories work together\u2014the non-parametric component helps to guide the generation, drawing out specific knowledge stored in the parametric memory."
        },
        {
            "text": "Jeopardy questions often contain two separate pieces of information, and RAG-Token may perform best because it can generate responses that combine content from several documents. Figure 2 shows an example. When generating \u201cSun\u201d, the posterior is high for document 2 which mentions \u201cThe Sun Also Rises\u201d. Similarly, document 1 dominates the posterior when \u201cA Farewell to Arms\u201d is generated. Intriguingly, after the first token of each book is generated, the document posterior flattens. This observation suggests that the generator can complete the titles without depending on specific documents. In other words, the model\u2019s parametric knowledge is sufficient to complete the titles. We find evidence for this hypothesis by feeding the BART-only baseline with the partial decoding \"The Sun\". BART completes the generation \"The Sun Also Rises\" is a novel by this author of \"The Sun Also Rises\" indicating the title \"The Sun Also Rises\" is stored in BART\u2019s parameters. Similarly, BART will complete the partial decoding \"The Sun Also Rises\" is a novel by this author of \"A Farewell to Arms\". This example shows how parametric and non-parametric memories work together\u2014the non-parametric component helps to guide the generation, drawing out specific knowledge stored in the parametric memory.",
            "page": 6,
            "x": 104,
            "y": 502,
            "width": 404,
            "height": 157,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "15-jeopardy",
            "chunk_id": "66a048af-767f-40c7-bfd8-148332c6161b",
            "group_text": "### 4.3 Jeopardy Question Generation\n\nTable 2 shows that RAG-Token performs better than RAG-Sequence on Jeopardy question generation, with both models outperforming BART on Q-BLEU-1. 4 shows human evaluation results, over 452 pairs of generations from BART and RAG-Token. Evaluators indicated that BART was more factual than RAG in only 7.1% of cases, while RAG was more factual in 42.7% of cases, and both RAG and BART were factual in a further 17% of cases, clearly demonstrating the effectiveness of RAG on the task over a state-of-the-art generation model. Evaluators also find RAG generations to be more specific by a large margin. Table 3 shows typical generations from each model.\n\nJeopardy questions often contain two separate pieces of information, and RAG-Token may perform best because it can generate responses that combine content from several documents. Figure 2 shows an example. When generating \u201cSun\u201d, the posterior is high for document 2 which mentions \u201cThe Sun Also Rises\u201d. Similarly, document 1 dominates the posterior when \u201cA Farewell to Arms\u201d is generated. Intriguingly, after the first token of each book is generated, the document posterior flattens. This observation suggests that the generator can complete the titles without depending on specific documents. In other words, the model\u2019s parametric knowledge is sufficient to complete the titles. We find evidence for this hypothesis by feeding the BART-only baseline with the partial decoding \"The Sun\". BART completes the generation \"The Sun Also Rises\" is a novel by this author of \"The Sun Also Rises\" indicating the title \"The Sun Also Rises\" is stored in BART\u2019s parameters. Similarly, BART will complete the partial decoding \"The Sun Also Rises\" is a novel by this author of \"A Farewell to Arms\". This example shows how parametric and non-parametric memories work together\u2014the non-parametric component helps to guide the generation, drawing out specific knowledge stored in the parametric memory."
        },
        {
            "text": "## 4.4 Fact Verification\n\nTable 2 shows our results on FEVER. For 3-way classification, RAG scores are within 4.3% of state-of-the-art models, which are complex pipeline systems with domain-specific architectures and substantial engineering, trained using intermediate retrieval supervision, which RAG does not require.",
            "page": 6,
            "x": 103,
            "y": 667,
            "width": 406,
            "height": 59,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "16-fact",
            "chunk_id": "47422925-5fa6-4b11-afee-c6597df20021",
            "group_text": "## 4.4 Fact Verification\n\nTable 2 shows our results on FEVER. For 3-way classification, RAG scores are within 4.3% of state-of-the-art models, which are complex pipeline systems with domain-specific architectures and substantial engineering, trained using intermediate retrieval supervision, which RAG does not require.\n\nDocument 1: his works are considered classics of American literature ... His wartime experiences formed the basis for his novel \u201cA Farewell to Arms\u201d (1929) ...\n\nDocument 2: ... artists of the 1920s \"Lost Generation\" expatriate community. His debut novel, **\"The Sun Also Rises\"**, was published in 1926.\n\nFigure 2: RAG-Token document posterior $p(z_i|x, y_i, y_{-i})$ for each generated token for input \u201cHemingway\" for Jeopardy generation with 5 retrieved documents. The posterior for document 1 is high when generating \u201cA Farewell to Arms\" and for document 2 when generating \u201cThe Sun Also Rises\".\n\nTable 3: Examples from generation tasks. RAG models generate more specific and factually accurate responses. \u2018?\u2019 indicates factually incorrect responses, * indicates partially correct responses.\n\nFor 2-way classification, we compare against Thorne and Vlachos [57], who train RoBERTa [35] to classify the claim as true or false given the gold evidence sentence. RAG achieves an accuracy within 2.7% of this model, despite being supplied with only the claim and retrieving its own evidence. We also analyze whether documents retrieved by RAG correspond to documents annotated as gold evidence in FEVER. We calculate the overlap in article titles between the top $k$ documents retrieved by RAG and gold evidence annotations. We find that the top retrieved document is from a gold article in 71% of cases, and a gold article is present in the top 10 retrieved articles in 90% of cases."
        },
        {
            "text": "Document 1: his works are considered classics of American literature ... His wartime experiences formed the basis for his novel \u201cA Farewell to Arms\u201d (1929) ...",
            "page": 7,
            "x": 107,
            "y": 74,
            "width": 177,
            "height": 22,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "16-fact",
            "chunk_id": "9e436d4c-5700-4334-8bde-bb52deb89bdd",
            "group_text": "## 4.4 Fact Verification\n\nTable 2 shows our results on FEVER. For 3-way classification, RAG scores are within 4.3% of state-of-the-art models, which are complex pipeline systems with domain-specific architectures and substantial engineering, trained using intermediate retrieval supervision, which RAG does not require.\n\nDocument 1: his works are considered classics of American literature ... His wartime experiences formed the basis for his novel \u201cA Farewell to Arms\u201d (1929) ...\n\nDocument 2: ... artists of the 1920s \"Lost Generation\" expatriate community. His debut novel, **\"The Sun Also Rises\"**, was published in 1926.\n\nFigure 2: RAG-Token document posterior $p(z_i|x, y_i, y_{-i})$ for each generated token for input \u201cHemingway\" for Jeopardy generation with 5 retrieved documents. The posterior for document 1 is high when generating \u201cA Farewell to Arms\" and for document 2 when generating \u201cThe Sun Also Rises\".\n\nTable 3: Examples from generation tasks. RAG models generate more specific and factually accurate responses. \u2018?\u2019 indicates factually incorrect responses, * indicates partially correct responses.\n\nFor 2-way classification, we compare against Thorne and Vlachos [57], who train RoBERTa [35] to classify the claim as true or false given the gold evidence sentence. RAG achieves an accuracy within 2.7% of this model, despite being supplied with only the claim and retrieving its own evidence. We also analyze whether documents retrieved by RAG correspond to documents annotated as gold evidence in FEVER. We calculate the overlap in article titles between the top $k$ documents retrieved by RAG and gold evidence annotations. We find that the top retrieved document is from a gold article in 71% of cases, and a gold article is present in the top 10 retrieved articles in 90% of cases."
        },
        {
            "text": "Document 2: ... artists of the 1920s \"Lost Generation\" expatriate community. His debut novel, **\"The Sun Also Rises\"**, was published in 1926.",
            "page": 7,
            "x": 107,
            "y": 98,
            "width": 177,
            "height": 22,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "16-fact",
            "chunk_id": "16ae34f2-1d68-40aa-97d7-b58274dde20c",
            "group_text": "## 4.4 Fact Verification\n\nTable 2 shows our results on FEVER. For 3-way classification, RAG scores are within 4.3% of state-of-the-art models, which are complex pipeline systems with domain-specific architectures and substantial engineering, trained using intermediate retrieval supervision, which RAG does not require.\n\nDocument 1: his works are considered classics of American literature ... His wartime experiences formed the basis for his novel \u201cA Farewell to Arms\u201d (1929) ...\n\nDocument 2: ... artists of the 1920s \"Lost Generation\" expatriate community. His debut novel, **\"The Sun Also Rises\"**, was published in 1926.\n\nFigure 2: RAG-Token document posterior $p(z_i|x, y_i, y_{-i})$ for each generated token for input \u201cHemingway\" for Jeopardy generation with 5 retrieved documents. The posterior for document 1 is high when generating \u201cA Farewell to Arms\" and for document 2 when generating \u201cThe Sun Also Rises\".\n\nTable 3: Examples from generation tasks. RAG models generate more specific and factually accurate responses. \u2018?\u2019 indicates factually incorrect responses, * indicates partially correct responses.\n\nFor 2-way classification, we compare against Thorne and Vlachos [57], who train RoBERTa [35] to classify the claim as true or false given the gold evidence sentence. RAG achieves an accuracy within 2.7% of this model, despite being supplied with only the claim and retrieving its own evidence. We also analyze whether documents retrieved by RAG correspond to documents annotated as gold evidence in FEVER. We calculate the overlap in article titles between the top $k$ documents retrieved by RAG and gold evidence annotations. We find that the top retrieved document is from a gold article in 71% of cases, and a gold article is present in the top 10 retrieved articles in 90% of cases."
        },
        {
            "text": "Figure 2: RAG-Token document posterior $p(z_i|x, y_i, y_{-i})$ for each generated token for input \u201cHemingway\" for Jeopardy generation with 5 retrieved documents. The posterior for document 1 is high when generating \u201cA Farewell to Arms\" and for document 2 when generating \u201cThe Sun Also Rises\".",
            "page": 7,
            "x": 105,
            "y": 138,
            "width": 402,
            "height": 37,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "16-fact",
            "chunk_id": "97a3128d-9346-46eb-bb84-c9a2ae55cb42",
            "group_text": "## 4.4 Fact Verification\n\nTable 2 shows our results on FEVER. For 3-way classification, RAG scores are within 4.3% of state-of-the-art models, which are complex pipeline systems with domain-specific architectures and substantial engineering, trained using intermediate retrieval supervision, which RAG does not require.\n\nDocument 1: his works are considered classics of American literature ... His wartime experiences formed the basis for his novel \u201cA Farewell to Arms\u201d (1929) ...\n\nDocument 2: ... artists of the 1920s \"Lost Generation\" expatriate community. His debut novel, **\"The Sun Also Rises\"**, was published in 1926.\n\nFigure 2: RAG-Token document posterior $p(z_i|x, y_i, y_{-i})$ for each generated token for input \u201cHemingway\" for Jeopardy generation with 5 retrieved documents. The posterior for document 1 is high when generating \u201cA Farewell to Arms\" and for document 2 when generating \u201cThe Sun Also Rises\".\n\nTable 3: Examples from generation tasks. RAG models generate more specific and factually accurate responses. \u2018?\u2019 indicates factually incorrect responses, * indicates partially correct responses.\n\nFor 2-way classification, we compare against Thorne and Vlachos [57], who train RoBERTa [35] to classify the claim as true or false given the gold evidence sentence. RAG achieves an accuracy within 2.7% of this model, despite being supplied with only the claim and retrieving its own evidence. We also analyze whether documents retrieved by RAG correspond to documents annotated as gold evidence in FEVER. We calculate the overlap in article titles between the top $k$ documents retrieved by RAG and gold evidence annotations. We find that the top retrieved document is from a gold article in 71% of cases, and a gold article is present in the top 10 retrieved articles in 90% of cases."
        },
        {
            "text": "Table 3: Examples from generation tasks. RAG models generate more specific and factually accurate responses. \u2018?\u2019 indicates factually incorrect responses, * indicates partially correct responses.",
            "page": 7,
            "x": 105,
            "y": 190,
            "width": 401,
            "height": 25,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "16-fact",
            "chunk_id": "3bafdfdd-d425-4367-9458-9c17de9dae8f",
            "group_text": "## 4.4 Fact Verification\n\nTable 2 shows our results on FEVER. For 3-way classification, RAG scores are within 4.3% of state-of-the-art models, which are complex pipeline systems with domain-specific architectures and substantial engineering, trained using intermediate retrieval supervision, which RAG does not require.\n\nDocument 1: his works are considered classics of American literature ... His wartime experiences formed the basis for his novel \u201cA Farewell to Arms\u201d (1929) ...\n\nDocument 2: ... artists of the 1920s \"Lost Generation\" expatriate community. His debut novel, **\"The Sun Also Rises\"**, was published in 1926.\n\nFigure 2: RAG-Token document posterior $p(z_i|x, y_i, y_{-i})$ for each generated token for input \u201cHemingway\" for Jeopardy generation with 5 retrieved documents. The posterior for document 1 is high when generating \u201cA Farewell to Arms\" and for document 2 when generating \u201cThe Sun Also Rises\".\n\nTable 3: Examples from generation tasks. RAG models generate more specific and factually accurate responses. \u2018?\u2019 indicates factually incorrect responses, * indicates partially correct responses.\n\nFor 2-way classification, we compare against Thorne and Vlachos [57], who train RoBERTa [35] to classify the claim as true or false given the gold evidence sentence. RAG achieves an accuracy within 2.7% of this model, despite being supplied with only the claim and retrieving its own evidence. We also analyze whether documents retrieved by RAG correspond to documents annotated as gold evidence in FEVER. We calculate the overlap in article titles between the top $k$ documents retrieved by RAG and gold evidence annotations. We find that the top retrieved document is from a gold article in 71% of cases, and a gold article is present in the top 10 retrieved articles in 90% of cases."
        },
        {
            "text": "For 2-way classification, we compare against Thorne and Vlachos [57], who train RoBERTa [35] to classify the claim as true or false given the gold evidence sentence. RAG achieves an accuracy within 2.7% of this model, despite being supplied with only the claim and retrieving its own evidence. We also analyze whether documents retrieved by RAG correspond to documents annotated as gold evidence in FEVER. We calculate the overlap in article titles between the top $k$ documents retrieved by RAG and gold evidence annotations. We find that the top retrieved document is from a gold article in 71% of cases, and a gold article is present in the top 10 retrieved articles in 90% of cases.",
            "page": 7,
            "x": 105,
            "y": 371,
            "width": 402,
            "height": 80,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "16-fact",
            "chunk_id": "d97445c3-41f3-42ec-8589-a6ab8a8c7e86",
            "group_text": "## 4.4 Fact Verification\n\nTable 2 shows our results on FEVER. For 3-way classification, RAG scores are within 4.3% of state-of-the-art models, which are complex pipeline systems with domain-specific architectures and substantial engineering, trained using intermediate retrieval supervision, which RAG does not require.\n\nDocument 1: his works are considered classics of American literature ... His wartime experiences formed the basis for his novel \u201cA Farewell to Arms\u201d (1929) ...\n\nDocument 2: ... artists of the 1920s \"Lost Generation\" expatriate community. His debut novel, **\"The Sun Also Rises\"**, was published in 1926.\n\nFigure 2: RAG-Token document posterior $p(z_i|x, y_i, y_{-i})$ for each generated token for input \u201cHemingway\" for Jeopardy generation with 5 retrieved documents. The posterior for document 1 is high when generating \u201cA Farewell to Arms\" and for document 2 when generating \u201cThe Sun Also Rises\".\n\nTable 3: Examples from generation tasks. RAG models generate more specific and factually accurate responses. \u2018?\u2019 indicates factually incorrect responses, * indicates partially correct responses.\n\nFor 2-way classification, we compare against Thorne and Vlachos [57], who train RoBERTa [35] to classify the claim as true or false given the gold evidence sentence. RAG achieves an accuracy within 2.7% of this model, despite being supplied with only the claim and retrieving its own evidence. We also analyze whether documents retrieved by RAG correspond to documents annotated as gold evidence in FEVER. We calculate the overlap in article titles between the top $k$ documents retrieved by RAG and gold evidence annotations. We find that the top retrieved document is from a gold article in 71% of cases, and a gold article is present in the top 10 retrieved articles in 90% of cases."
        },
        {
            "text": "4.5 Additional Results\n\nGeneration Diversity Section 4.3 shows that RAG models are more factual and specific than BART for Jeopardy question generation. Following recent work on diversity-promoting decoding [33, 59, 39], we also investigate generation diversity by calculating the ratio of distinct ngrams to total ngrams generated by different models. Table 5 shows that RAG-Sequence\u2019s generations are more diverse than RAG-Token\u2019s, and both are significantly more diverse than BART without needing any diversity-promoting decoding.",
            "page": 7,
            "x": 104,
            "y": 461,
            "width": 402,
            "height": 89,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "17-additional",
            "chunk_id": "5af041d7-76f8-40e6-9110-5e90ae74e1c3",
            "group_text": "4.5 Additional Results\n\nGeneration Diversity Section 4.3 shows that RAG models are more factual and specific than BART for Jeopardy question generation. Following recent work on diversity-promoting decoding [33, 59, 39], we also investigate generation diversity by calculating the ratio of distinct ngrams to total ngrams generated by different models. Table 5 shows that RAG-Sequence\u2019s generations are more diverse than RAG-Token\u2019s, and both are significantly more diverse than BART without needing any diversity-promoting decoding.\n\n**Retrieval Ablations**   A key feature of RAG is learning to retrieve relevant information for the task. To assess the effectiveness of the retrieval mechanism, we run ablations where we freeze the retriever during training. As shown in Table 6, learned retrieval improves results for all tasks.\n\nWe compare RAG\u2019s dense retriever to a word overlap-based BM25 retriever [53]. Here, we replace RAG\u2019s retriever with a fixed BM25 system, and use BM25 retrieval scores as logits when calculating $p(z|x)$. Table 6 shows the results. For FEVER, BM25 performs best, perhaps since FEVER claims are heavily entity-centric and thus well-suited for word overlap-based retrieval. Differentiable retrieval improves results on all other tasks, especially for Open-Domain QA, where it is crucial."
        },
        {
            "text": "**Retrieval Ablations**   A key feature of RAG is learning to retrieve relevant information for the task. To assess the effectiveness of the retrieval mechanism, we run ablations where we freeze the retriever during training. As shown in Table 6, learned retrieval improves results for all tasks.",
            "page": 7,
            "x": 105,
            "y": 560,
            "width": 402,
            "height": 36,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "17-additional",
            "chunk_id": "4102b51c-bc85-4235-be90-5a0f23b3afbf",
            "group_text": "4.5 Additional Results\n\nGeneration Diversity Section 4.3 shows that RAG models are more factual and specific than BART for Jeopardy question generation. Following recent work on diversity-promoting decoding [33, 59, 39], we also investigate generation diversity by calculating the ratio of distinct ngrams to total ngrams generated by different models. Table 5 shows that RAG-Sequence\u2019s generations are more diverse than RAG-Token\u2019s, and both are significantly more diverse than BART without needing any diversity-promoting decoding.\n\n**Retrieval Ablations**   A key feature of RAG is learning to retrieve relevant information for the task. To assess the effectiveness of the retrieval mechanism, we run ablations where we freeze the retriever during training. As shown in Table 6, learned retrieval improves results for all tasks.\n\nWe compare RAG\u2019s dense retriever to a word overlap-based BM25 retriever [53]. Here, we replace RAG\u2019s retriever with a fixed BM25 system, and use BM25 retrieval scores as logits when calculating $p(z|x)$. Table 6 shows the results. For FEVER, BM25 performs best, perhaps since FEVER claims are heavily entity-centric and thus well-suited for word overlap-based retrieval. Differentiable retrieval improves results on all other tasks, especially for Open-Domain QA, where it is crucial."
        },
        {
            "text": "We compare RAG\u2019s dense retriever to a word overlap-based BM25 retriever [53]. Here, we replace RAG\u2019s retriever with a fixed BM25 system, and use BM25 retrieval scores as logits when calculating $p(z|x)$. Table 6 shows the results. For FEVER, BM25 performs best, perhaps since FEVER claims are heavily entity-centric and thus well-suited for word overlap-based retrieval. Differentiable retrieval improves results on all other tasks, especially for Open-Domain QA, where it is crucial.",
            "page": 7,
            "x": 105,
            "y": 598,
            "width": 401,
            "height": 57,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "17-additional",
            "chunk_id": "e31d0a0f-65e1-4c66-9fef-24ea2f1845b6",
            "group_text": "4.5 Additional Results\n\nGeneration Diversity Section 4.3 shows that RAG models are more factual and specific than BART for Jeopardy question generation. Following recent work on diversity-promoting decoding [33, 59, 39], we also investigate generation diversity by calculating the ratio of distinct ngrams to total ngrams generated by different models. Table 5 shows that RAG-Sequence\u2019s generations are more diverse than RAG-Token\u2019s, and both are significantly more diverse than BART without needing any diversity-promoting decoding.\n\n**Retrieval Ablations**   A key feature of RAG is learning to retrieve relevant information for the task. To assess the effectiveness of the retrieval mechanism, we run ablations where we freeze the retriever during training. As shown in Table 6, learned retrieval improves results for all tasks.\n\nWe compare RAG\u2019s dense retriever to a word overlap-based BM25 retriever [53]. Here, we replace RAG\u2019s retriever with a fixed BM25 system, and use BM25 retrieval scores as logits when calculating $p(z|x)$. Table 6 shows the results. For FEVER, BM25 performs best, perhaps since FEVER claims are heavily entity-centric and thus well-suited for word overlap-based retrieval. Differentiable retrieval improves results on all other tasks, especially for Open-Domain QA, where it is crucial."
        },
        {
            "text": "Index hot-swapping   An advantage of non-parametric memory models like RAG is that knowledge can be easily updated at test time. Parametric-only models like T5 or BART need further training to update their behavior as the world changes. To demonstrate, we build an index using the DrQA [5] Wikipedia dump from December 2016 and compare outputs from RAG using this index to the newer index from our main results (December 2018). We prepare a list of 82 world leaders who had changed",
            "page": 7,
            "x": 104,
            "y": 666,
            "width": 402,
            "height": 58,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "18-index",
            "chunk_id": "82fbbe11-1fcf-426b-9788-e4133cf077f6",
            "group_text": "Index hot-swapping   An advantage of non-parametric memory models like RAG is that knowledge can be easily updated at test time. Parametric-only models like T5 or BART need further training to update their behavior as the world changes. To demonstrate, we build an index using the DrQA [5] Wikipedia dump from December 2016 and compare outputs from RAG using this index to the newer index from our main results (December 2018). We prepare a list of 82 world leaders who had changed\n\nbetween these dates and use a template \u201cWho is {position}?\u201d (e.g. \u201cWho is the President of Peru?\u201d) to query our NQ RAG model with each index. RAG answers 70% correctly using the 2016 index for 2016 world leaders and 68% using the 2018 index for 2018 world leaders. Accuracy with mismatched indices is low (12% with the 2018 index and 2016 leaders, 4% with the 2016 index and 2018 leaders). This shows we can update RAG\u2019s world knowledge by simply replacing its non-parametric memory.\n\nEffect of Retrieving more documents  Models are trained with either 5 or 10 retrieved latent documents, and we do not observe significant differences in performance between them. We have the flexibility to adjust the number of retrieved documents at test time, which can affect performance and runtime. Figure 3 (left) shows that retrieving more documents at test time monotonically improves Open-domain QA results for RAG-Sequence, but performance peaks for RAG-Token at 10 retrieved documents. Figure 3 (right) shows that retrieving more documents leads to higher Rouge-L for RAG-Token at the expense of Bleu-1, but the effect is less pronounced for RAG-Sequence."
        },
        {
            "text": "between these dates and use a template \u201cWho is {position}?\u201d (e.g. \u201cWho is the President of Peru?\u201d) to query our NQ RAG model with each index. RAG answers 70% correctly using the 2016 index for 2016 world leaders and 68% using the 2018 index for 2018 world leaders. Accuracy with mismatched indices is low (12% with the 2018 index and 2016 leaders, 4% with the 2016 index and 2018 leaders). This shows we can update RAG\u2019s world knowledge by simply replacing its non-parametric memory.",
            "page": 8,
            "x": 104,
            "y": 337,
            "width": 404,
            "height": 61,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "18-index",
            "chunk_id": "4565f0b4-7244-4fc9-9184-fa061029af54",
            "group_text": "Index hot-swapping   An advantage of non-parametric memory models like RAG is that knowledge can be easily updated at test time. Parametric-only models like T5 or BART need further training to update their behavior as the world changes. To demonstrate, we build an index using the DrQA [5] Wikipedia dump from December 2016 and compare outputs from RAG using this index to the newer index from our main results (December 2018). We prepare a list of 82 world leaders who had changed\n\nbetween these dates and use a template \u201cWho is {position}?\u201d (e.g. \u201cWho is the President of Peru?\u201d) to query our NQ RAG model with each index. RAG answers 70% correctly using the 2016 index for 2016 world leaders and 68% using the 2018 index for 2018 world leaders. Accuracy with mismatched indices is low (12% with the 2018 index and 2016 leaders, 4% with the 2016 index and 2018 leaders). This shows we can update RAG\u2019s world knowledge by simply replacing its non-parametric memory.\n\nEffect of Retrieving more documents  Models are trained with either 5 or 10 retrieved latent documents, and we do not observe significant differences in performance between them. We have the flexibility to adjust the number of retrieved documents at test time, which can affect performance and runtime. Figure 3 (left) shows that retrieving more documents at test time monotonically improves Open-domain QA results for RAG-Sequence, but performance peaks for RAG-Token at 10 retrieved documents. Figure 3 (right) shows that retrieving more documents leads to higher Rouge-L for RAG-Token at the expense of Bleu-1, but the effect is less pronounced for RAG-Sequence."
        },
        {
            "text": "Effect of Retrieving more documents  Models are trained with either 5 or 10 retrieved latent documents, and we do not observe significant differences in performance between them. We have the flexibility to adjust the number of retrieved documents at test time, which can affect performance and runtime. Figure 3 (left) shows that retrieving more documents at test time monotonically improves Open-domain QA results for RAG-Sequence, but performance peaks for RAG-Token at 10 retrieved documents. Figure 3 (right) shows that retrieving more documents leads to higher Rouge-L for RAG-Token at the expense of Bleu-1, but the effect is less pronounced for RAG-Sequence.",
            "page": 8,
            "x": 104,
            "y": 405,
            "width": 403,
            "height": 81,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "18-index",
            "chunk_id": "9682012d-f0ef-4fde-b1a6-b06d94fa3000",
            "group_text": "Index hot-swapping   An advantage of non-parametric memory models like RAG is that knowledge can be easily updated at test time. Parametric-only models like T5 or BART need further training to update their behavior as the world changes. To demonstrate, we build an index using the DrQA [5] Wikipedia dump from December 2016 and compare outputs from RAG using this index to the newer index from our main results (December 2018). We prepare a list of 82 world leaders who had changed\n\nbetween these dates and use a template \u201cWho is {position}?\u201d (e.g. \u201cWho is the President of Peru?\u201d) to query our NQ RAG model with each index. RAG answers 70% correctly using the 2016 index for 2016 world leaders and 68% using the 2018 index for 2018 world leaders. Accuracy with mismatched indices is low (12% with the 2018 index and 2016 leaders, 4% with the 2016 index and 2018 leaders). This shows we can update RAG\u2019s world knowledge by simply replacing its non-parametric memory.\n\nEffect of Retrieving more documents  Models are trained with either 5 or 10 retrieved latent documents, and we do not observe significant differences in performance between them. We have the flexibility to adjust the number of retrieved documents at test time, which can affect performance and runtime. Figure 3 (left) shows that retrieving more documents at test time monotonically improves Open-domain QA results for RAG-Sequence, but performance peaks for RAG-Token at 10 retrieved documents. Figure 3 (right) shows that retrieving more documents leads to higher Rouge-L for RAG-Token at the expense of Bleu-1, but the effect is less pronounced for RAG-Sequence."
        },
        {
            "text": "## 5   Related Work\n\n**Single-Task Retrieval**   Prior work has shown that retrieval improves performance across a variety of NLP tasks when considered in isolation. Such tasks include open-domain question answering [5, 29], fact checking [56], fact completion [48], long-form question answering [12], Wikipedia article generation [36], dialogue [41, 65, 9, 13], translation [17], and language modeling [19, 27]. Our work unifies previous successes in incorporating retrieval into individual tasks, showing that a single retrieval-based architecture is capable of achieving strong performance across several tasks.",
            "page": 8,
            "x": 103,
            "y": 627,
            "width": 405,
            "height": 98,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "19-related",
            "chunk_id": "a69c297f-7e3b-43dd-b1f7-0fe8b1b36154",
            "group_text": "## 5   Related Work\n\n**Single-Task Retrieval**   Prior work has shown that retrieval improves performance across a variety of NLP tasks when considered in isolation. Such tasks include open-domain question answering [5, 29], fact checking [56], fact completion [48], long-form question answering [12], Wikipedia article generation [36], dialogue [41, 65, 9, 13], translation [17], and language modeling [19, 27]. Our work unifies previous successes in incorporating retrieval into individual tasks, showing that a single retrieval-based architecture is capable of achieving strong performance across several tasks.\n\n**General-Purpose Architectures for NLP**  Prior work on general-purpose architectures for NLP tasks has shown great success without the use of retrieval. A single, pre-trained language model has been shown to achieve strong performance on various classification tasks in the GLUE benchmarks [60, 61] after fine-tuning [49, 8]. GPT-2 [50] later showed that a single, left-to-right, pre-trained language model could achieve strong performance across both discriminative and generative tasks. For further improvement, BART [32] and T5 [51, 52] propose a single, pre-trained encoder-decoder model that leverages bi-directional attention to achieve stronger performance on discriminative and generative tasks. Our work aims to expand the space of possible tasks with a single, unified architecture, by learning a retrieval module to augment pre-trained, generative language models.\n\n**Learned Retrieval**  There is significant work on learning to retrieve documents in information retrieval, more recently with pre-trained, neural language models [44, 26] similar to ours. Some work optimizes the retrieval module to aid in a specific, downstream task such as question answering, using search [46], reinforcement learning [6, 63, 62], or a latent variable approach [31, 20] as in our work. These successes leverage different retrieval-based architectures and optimization techniques to achieve strong performance on a single task, while we show that a single retrieval-based architecture can be fine-tuned for strong performance on a variety of tasks.\n\n**Memory-based Architectures**   Our document index can be seen as a large external memory for neural networks to attend to, analogous to memory networks [64, 55]. Concurrent work [14] learns to retrieve a trained embedding for each entity in the input, rather than to retrieve raw text as in our work. Other work improves the ability of dialog models to generate factual text by attending over fact embeddings [15, 13]. A key feature of our memory is that it is comprised of raw text rather distributed representations, which makes the memory both (i) human-readable, lending a form of interpretability to our model, and (ii) human-writable, enabling us to dynamically update the model\u2019s memory by editing the document index. This approach has also been used in knowledge-intensive dialog, where generators have been conditioned on retrieved text directly, albeit obtained via TF-IDF rather than end-to-end learnt retrieval [9].\n\n**Retrieve-and-Edit approaches**   Our method shares some similarities with retrieve-and-edit style approaches, where a similar training input-output pair is retrieved for a given input, and then edited to provide a final output. These approaches have proved successful in a number of domains including Machine Translation [18, 22] and Semantic Parsing [21]. Our approach does have several differences, including less of emphasis on lightly editing a retrieved item, but on aggregating content from several pieces of retrieved content, as well as learning latent retrieval, and retrieving evidence documents rather than related training pairs. This said, RAG techniques may work well in these settings, and could represent promising future work."
        },
        {
            "text": "**General-Purpose Architectures for NLP**  Prior work on general-purpose architectures for NLP tasks has shown great success without the use of retrieval. A single, pre-trained language model has been shown to achieve strong performance on various classification tasks in the GLUE benchmarks [60, 61] after fine-tuning [49, 8]. GPT-2 [50] later showed that a single, left-to-right, pre-trained language model could achieve strong performance across both discriminative and generative tasks. For further improvement, BART [32] and T5 [51, 52] propose a single, pre-trained encoder-decoder model that leverages bi-directional attention to achieve stronger performance on discriminative and generative tasks. Our work aims to expand the space of possible tasks with a single, unified architecture, by learning a retrieval module to augment pre-trained, generative language models.",
            "page": 9,
            "x": 104,
            "y": 71,
            "width": 404,
            "height": 102,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "19-related",
            "chunk_id": "36c99bbe-ab5f-4e60-9919-85867efd7a12",
            "group_text": "## 5   Related Work\n\n**Single-Task Retrieval**   Prior work has shown that retrieval improves performance across a variety of NLP tasks when considered in isolation. Such tasks include open-domain question answering [5, 29], fact checking [56], fact completion [48], long-form question answering [12], Wikipedia article generation [36], dialogue [41, 65, 9, 13], translation [17], and language modeling [19, 27]. Our work unifies previous successes in incorporating retrieval into individual tasks, showing that a single retrieval-based architecture is capable of achieving strong performance across several tasks.\n\n**General-Purpose Architectures for NLP**  Prior work on general-purpose architectures for NLP tasks has shown great success without the use of retrieval. A single, pre-trained language model has been shown to achieve strong performance on various classification tasks in the GLUE benchmarks [60, 61] after fine-tuning [49, 8]. GPT-2 [50] later showed that a single, left-to-right, pre-trained language model could achieve strong performance across both discriminative and generative tasks. For further improvement, BART [32] and T5 [51, 52] propose a single, pre-trained encoder-decoder model that leverages bi-directional attention to achieve stronger performance on discriminative and generative tasks. Our work aims to expand the space of possible tasks with a single, unified architecture, by learning a retrieval module to augment pre-trained, generative language models.\n\n**Learned Retrieval**  There is significant work on learning to retrieve documents in information retrieval, more recently with pre-trained, neural language models [44, 26] similar to ours. Some work optimizes the retrieval module to aid in a specific, downstream task such as question answering, using search [46], reinforcement learning [6, 63, 62], or a latent variable approach [31, 20] as in our work. These successes leverage different retrieval-based architectures and optimization techniques to achieve strong performance on a single task, while we show that a single retrieval-based architecture can be fine-tuned for strong performance on a variety of tasks.\n\n**Memory-based Architectures**   Our document index can be seen as a large external memory for neural networks to attend to, analogous to memory networks [64, 55]. Concurrent work [14] learns to retrieve a trained embedding for each entity in the input, rather than to retrieve raw text as in our work. Other work improves the ability of dialog models to generate factual text by attending over fact embeddings [15, 13]. A key feature of our memory is that it is comprised of raw text rather distributed representations, which makes the memory both (i) human-readable, lending a form of interpretability to our model, and (ii) human-writable, enabling us to dynamically update the model\u2019s memory by editing the document index. This approach has also been used in knowledge-intensive dialog, where generators have been conditioned on retrieved text directly, albeit obtained via TF-IDF rather than end-to-end learnt retrieval [9].\n\n**Retrieve-and-Edit approaches**   Our method shares some similarities with retrieve-and-edit style approaches, where a similar training input-output pair is retrieved for a given input, and then edited to provide a final output. These approaches have proved successful in a number of domains including Machine Translation [18, 22] and Semantic Parsing [21]. Our approach does have several differences, including less of emphasis on lightly editing a retrieved item, but on aggregating content from several pieces of retrieved content, as well as learning latent retrieval, and retrieving evidence documents rather than related training pairs. This said, RAG techniques may work well in these settings, and could represent promising future work."
        },
        {
            "text": "**Learned Retrieval**  There is significant work on learning to retrieve documents in information retrieval, more recently with pre-trained, neural language models [44, 26] similar to ours. Some work optimizes the retrieval module to aid in a specific, downstream task such as question answering, using search [46], reinforcement learning [6, 63, 62], or a latent variable approach [31, 20] as in our work. These successes leverage different retrieval-based architectures and optimization techniques to achieve strong performance on a single task, while we show that a single retrieval-based architecture can be fine-tuned for strong performance on a variety of tasks.",
            "page": 9,
            "x": 104,
            "y": 181,
            "width": 403,
            "height": 80,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "19-related",
            "chunk_id": "de6253a4-bfb5-4df6-9563-ede26acbb66a",
            "group_text": "## 5   Related Work\n\n**Single-Task Retrieval**   Prior work has shown that retrieval improves performance across a variety of NLP tasks when considered in isolation. Such tasks include open-domain question answering [5, 29], fact checking [56], fact completion [48], long-form question answering [12], Wikipedia article generation [36], dialogue [41, 65, 9, 13], translation [17], and language modeling [19, 27]. Our work unifies previous successes in incorporating retrieval into individual tasks, showing that a single retrieval-based architecture is capable of achieving strong performance across several tasks.\n\n**General-Purpose Architectures for NLP**  Prior work on general-purpose architectures for NLP tasks has shown great success without the use of retrieval. A single, pre-trained language model has been shown to achieve strong performance on various classification tasks in the GLUE benchmarks [60, 61] after fine-tuning [49, 8]. GPT-2 [50] later showed that a single, left-to-right, pre-trained language model could achieve strong performance across both discriminative and generative tasks. For further improvement, BART [32] and T5 [51, 52] propose a single, pre-trained encoder-decoder model that leverages bi-directional attention to achieve stronger performance on discriminative and generative tasks. Our work aims to expand the space of possible tasks with a single, unified architecture, by learning a retrieval module to augment pre-trained, generative language models.\n\n**Learned Retrieval**  There is significant work on learning to retrieve documents in information retrieval, more recently with pre-trained, neural language models [44, 26] similar to ours. Some work optimizes the retrieval module to aid in a specific, downstream task such as question answering, using search [46], reinforcement learning [6, 63, 62], or a latent variable approach [31, 20] as in our work. These successes leverage different retrieval-based architectures and optimization techniques to achieve strong performance on a single task, while we show that a single retrieval-based architecture can be fine-tuned for strong performance on a variety of tasks.\n\n**Memory-based Architectures**   Our document index can be seen as a large external memory for neural networks to attend to, analogous to memory networks [64, 55]. Concurrent work [14] learns to retrieve a trained embedding for each entity in the input, rather than to retrieve raw text as in our work. Other work improves the ability of dialog models to generate factual text by attending over fact embeddings [15, 13]. A key feature of our memory is that it is comprised of raw text rather distributed representations, which makes the memory both (i) human-readable, lending a form of interpretability to our model, and (ii) human-writable, enabling us to dynamically update the model\u2019s memory by editing the document index. This approach has also been used in knowledge-intensive dialog, where generators have been conditioned on retrieved text directly, albeit obtained via TF-IDF rather than end-to-end learnt retrieval [9].\n\n**Retrieve-and-Edit approaches**   Our method shares some similarities with retrieve-and-edit style approaches, where a similar training input-output pair is retrieved for a given input, and then edited to provide a final output. These approaches have proved successful in a number of domains including Machine Translation [18, 22] and Semantic Parsing [21]. Our approach does have several differences, including less of emphasis on lightly editing a retrieved item, but on aggregating content from several pieces of retrieved content, as well as learning latent retrieval, and retrieving evidence documents rather than related training pairs. This said, RAG techniques may work well in these settings, and could represent promising future work."
        },
        {
            "text": "**Memory-based Architectures**   Our document index can be seen as a large external memory for neural networks to attend to, analogous to memory networks [64, 55]. Concurrent work [14] learns to retrieve a trained embedding for each entity in the input, rather than to retrieve raw text as in our work. Other work improves the ability of dialog models to generate factual text by attending over fact embeddings [15, 13]. A key feature of our memory is that it is comprised of raw text rather distributed representations, which makes the memory both (i) human-readable, lending a form of interpretability to our model, and (ii) human-writable, enabling us to dynamically update the model\u2019s memory by editing the document index. This approach has also been used in knowledge-intensive dialog, where generators have been conditioned on retrieved text directly, albeit obtained via TF-IDF rather than end-to-end learnt retrieval [9].",
            "page": 9,
            "x": 104,
            "y": 270,
            "width": 403,
            "height": 113,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "19-related",
            "chunk_id": "56e40c73-05d6-4cd2-9c4a-c820c73666ba",
            "group_text": "## 5   Related Work\n\n**Single-Task Retrieval**   Prior work has shown that retrieval improves performance across a variety of NLP tasks when considered in isolation. Such tasks include open-domain question answering [5, 29], fact checking [56], fact completion [48], long-form question answering [12], Wikipedia article generation [36], dialogue [41, 65, 9, 13], translation [17], and language modeling [19, 27]. Our work unifies previous successes in incorporating retrieval into individual tasks, showing that a single retrieval-based architecture is capable of achieving strong performance across several tasks.\n\n**General-Purpose Architectures for NLP**  Prior work on general-purpose architectures for NLP tasks has shown great success without the use of retrieval. A single, pre-trained language model has been shown to achieve strong performance on various classification tasks in the GLUE benchmarks [60, 61] after fine-tuning [49, 8]. GPT-2 [50] later showed that a single, left-to-right, pre-trained language model could achieve strong performance across both discriminative and generative tasks. For further improvement, BART [32] and T5 [51, 52] propose a single, pre-trained encoder-decoder model that leverages bi-directional attention to achieve stronger performance on discriminative and generative tasks. Our work aims to expand the space of possible tasks with a single, unified architecture, by learning a retrieval module to augment pre-trained, generative language models.\n\n**Learned Retrieval**  There is significant work on learning to retrieve documents in information retrieval, more recently with pre-trained, neural language models [44, 26] similar to ours. Some work optimizes the retrieval module to aid in a specific, downstream task such as question answering, using search [46], reinforcement learning [6, 63, 62], or a latent variable approach [31, 20] as in our work. These successes leverage different retrieval-based architectures and optimization techniques to achieve strong performance on a single task, while we show that a single retrieval-based architecture can be fine-tuned for strong performance on a variety of tasks.\n\n**Memory-based Architectures**   Our document index can be seen as a large external memory for neural networks to attend to, analogous to memory networks [64, 55]. Concurrent work [14] learns to retrieve a trained embedding for each entity in the input, rather than to retrieve raw text as in our work. Other work improves the ability of dialog models to generate factual text by attending over fact embeddings [15, 13]. A key feature of our memory is that it is comprised of raw text rather distributed representations, which makes the memory both (i) human-readable, lending a form of interpretability to our model, and (ii) human-writable, enabling us to dynamically update the model\u2019s memory by editing the document index. This approach has also been used in knowledge-intensive dialog, where generators have been conditioned on retrieved text directly, albeit obtained via TF-IDF rather than end-to-end learnt retrieval [9].\n\n**Retrieve-and-Edit approaches**   Our method shares some similarities with retrieve-and-edit style approaches, where a similar training input-output pair is retrieved for a given input, and then edited to provide a final output. These approaches have proved successful in a number of domains including Machine Translation [18, 22] and Semantic Parsing [21]. Our approach does have several differences, including less of emphasis on lightly editing a retrieved item, but on aggregating content from several pieces of retrieved content, as well as learning latent retrieval, and retrieving evidence documents rather than related training pairs. This said, RAG techniques may work well in these settings, and could represent promising future work."
        },
        {
            "text": "**Retrieve-and-Edit approaches**   Our method shares some similarities with retrieve-and-edit style approaches, where a similar training input-output pair is retrieved for a given input, and then edited to provide a final output. These approaches have proved successful in a number of domains including Machine Translation [18, 22] and Semantic Parsing [21]. Our approach does have several differences, including less of emphasis on lightly editing a retrieved item, but on aggregating content from several pieces of retrieved content, as well as learning latent retrieval, and retrieving evidence documents rather than related training pairs. This said, RAG techniques may work well in these settings, and could represent promising future work.",
            "page": 9,
            "x": 104,
            "y": 391,
            "width": 402,
            "height": 91,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "19-related",
            "chunk_id": "3d536b98-5e9e-4252-84aa-c3c4acbf344f",
            "group_text": "## 5   Related Work\n\n**Single-Task Retrieval**   Prior work has shown that retrieval improves performance across a variety of NLP tasks when considered in isolation. Such tasks include open-domain question answering [5, 29], fact checking [56], fact completion [48], long-form question answering [12], Wikipedia article generation [36], dialogue [41, 65, 9, 13], translation [17], and language modeling [19, 27]. Our work unifies previous successes in incorporating retrieval into individual tasks, showing that a single retrieval-based architecture is capable of achieving strong performance across several tasks.\n\n**General-Purpose Architectures for NLP**  Prior work on general-purpose architectures for NLP tasks has shown great success without the use of retrieval. A single, pre-trained language model has been shown to achieve strong performance on various classification tasks in the GLUE benchmarks [60, 61] after fine-tuning [49, 8]. GPT-2 [50] later showed that a single, left-to-right, pre-trained language model could achieve strong performance across both discriminative and generative tasks. For further improvement, BART [32] and T5 [51, 52] propose a single, pre-trained encoder-decoder model that leverages bi-directional attention to achieve stronger performance on discriminative and generative tasks. Our work aims to expand the space of possible tasks with a single, unified architecture, by learning a retrieval module to augment pre-trained, generative language models.\n\n**Learned Retrieval**  There is significant work on learning to retrieve documents in information retrieval, more recently with pre-trained, neural language models [44, 26] similar to ours. Some work optimizes the retrieval module to aid in a specific, downstream task such as question answering, using search [46], reinforcement learning [6, 63, 62], or a latent variable approach [31, 20] as in our work. These successes leverage different retrieval-based architectures and optimization techniques to achieve strong performance on a single task, while we show that a single retrieval-based architecture can be fine-tuned for strong performance on a variety of tasks.\n\n**Memory-based Architectures**   Our document index can be seen as a large external memory for neural networks to attend to, analogous to memory networks [64, 55]. Concurrent work [14] learns to retrieve a trained embedding for each entity in the input, rather than to retrieve raw text as in our work. Other work improves the ability of dialog models to generate factual text by attending over fact embeddings [15, 13]. A key feature of our memory is that it is comprised of raw text rather distributed representations, which makes the memory both (i) human-readable, lending a form of interpretability to our model, and (ii) human-writable, enabling us to dynamically update the model\u2019s memory by editing the document index. This approach has also been used in knowledge-intensive dialog, where generators have been conditioned on retrieved text directly, albeit obtained via TF-IDF rather than end-to-end learnt retrieval [9].\n\n**Retrieve-and-Edit approaches**   Our method shares some similarities with retrieve-and-edit style approaches, where a similar training input-output pair is retrieved for a given input, and then edited to provide a final output. These approaches have proved successful in a number of domains including Machine Translation [18, 22] and Semantic Parsing [21]. Our approach does have several differences, including less of emphasis on lightly editing a retrieved item, but on aggregating content from several pieces of retrieved content, as well as learning latent retrieval, and retrieving evidence documents rather than related training pairs. This said, RAG techniques may work well in these settings, and could represent promising future work."
        },
        {
            "text": "6 Discussion\n\nIn this work, we presented hybrid generation models with access to parametric and non-parametric memory. We showed that our RAG models obtain state of the art results on open-domain QA. We found that people prefer RAG\u2019s generation over purely parametric BART, finding RAG more factual and specific. We conducted an thorough investigation of the learned retrieval component, validating its effectiveness, and we illustrated how the retrieval index can be hot-swapped to update the model without requiring any retraining. In future work, it may be fruitful to investigate if the two components can be jointly pre-trained from scratch, either with a denoising objective similar to BART or some another objective. Our work opens up new research directions on how parametric and non-parametric memories interact and how to most effectively combine them, showing promise in being applied to a wide variety of NLP tasks.",
            "page": 9,
            "x": 104,
            "y": 495,
            "width": 403,
            "height": 136,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "20-discussion",
            "chunk_id": "8a60bfd4-7d41-44de-969c-6a8d83ac7870",
            "group_text": "6 Discussion\n\nIn this work, we presented hybrid generation models with access to parametric and non-parametric memory. We showed that our RAG models obtain state of the art results on open-domain QA. We found that people prefer RAG\u2019s generation over purely parametric BART, finding RAG more factual and specific. We conducted an thorough investigation of the learned retrieval component, validating its effectiveness, and we illustrated how the retrieval index can be hot-swapped to update the model without requiring any retraining. In future work, it may be fruitful to investigate if the two components can be jointly pre-trained from scratch, either with a denoising objective similar to BART or some another objective. Our work opens up new research directions on how parametric and non-parametric memories interact and how to most effectively combine them, showing promise in being applied to a wide variety of NLP tasks.\n\n## Broader Impact\n\nThis work offers several positive societal benefits over previous work: the fact that it is more strongly grounded in real factual knowledge (in this case Wikipedia) makes it \u201challucinate\u201d less with generations that are more factual, and offers more control and interpretability. RAG could be employed in a wide variety of scenarios with direct benefit to society, for example by endowing it with a medical index and asking it open-domain questions on that topic, or by helping people be more effective at their jobs.\n\nWith these advantages also come potential downsides: Wikipedia, or any potential external knowledge source, will probably never be entirely factual and completely devoid of bias. Since RAG can be employed as a language model, similar concerns as for GPT-2 [50] are valid here, although arguably to a lesser extent, including that it might be used to generate abuse, faked or misleading content in the news or on social media; to impersonate others; or to automate the production of spam/phishing content [54]. Advanced language models may also lead to the automation of various jobs in the coming decades [16]. In order to mitigate these risks, AI systems could be employed to fight against misleading content and automated spam/phishing.\n\n## Acknowledgments\n\nThe authors would like to thank the reviewers for their thoughtful and constructive feedback on this paper, as well as HuggingFace for their help in open-sourcing code to run RAG models. The authors would also like to thank Kyunghyun Cho and Sewon Min for productive discussions and advice. EP thanks supports from the NSF Graduate Research Fellowship. PL is supported by the FAIR PhD program."
        },
        {
            "text": "## Broader Impact\n\nThis work offers several positive societal benefits over previous work: the fact that it is more strongly grounded in real factual knowledge (in this case Wikipedia) makes it \u201challucinate\u201d less with generations that are more factual, and offers more control and interpretability. RAG could be employed in a wide variety of scenarios with direct benefit to society, for example by endowing it with a medical index and asking it open-domain questions on that topic, or by helping people be more effective at their jobs.",
            "page": 10,
            "x": 103,
            "y": 69,
            "width": 404,
            "height": 94,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "20-discussion",
            "chunk_id": "dc8762e8-16fc-47ad-8b92-b1fde0418a56",
            "group_text": "6 Discussion\n\nIn this work, we presented hybrid generation models with access to parametric and non-parametric memory. We showed that our RAG models obtain state of the art results on open-domain QA. We found that people prefer RAG\u2019s generation over purely parametric BART, finding RAG more factual and specific. We conducted an thorough investigation of the learned retrieval component, validating its effectiveness, and we illustrated how the retrieval index can be hot-swapped to update the model without requiring any retraining. In future work, it may be fruitful to investigate if the two components can be jointly pre-trained from scratch, either with a denoising objective similar to BART or some another objective. Our work opens up new research directions on how parametric and non-parametric memories interact and how to most effectively combine them, showing promise in being applied to a wide variety of NLP tasks.\n\n## Broader Impact\n\nThis work offers several positive societal benefits over previous work: the fact that it is more strongly grounded in real factual knowledge (in this case Wikipedia) makes it \u201challucinate\u201d less with generations that are more factual, and offers more control and interpretability. RAG could be employed in a wide variety of scenarios with direct benefit to society, for example by endowing it with a medical index and asking it open-domain questions on that topic, or by helping people be more effective at their jobs.\n\nWith these advantages also come potential downsides: Wikipedia, or any potential external knowledge source, will probably never be entirely factual and completely devoid of bias. Since RAG can be employed as a language model, similar concerns as for GPT-2 [50] are valid here, although arguably to a lesser extent, including that it might be used to generate abuse, faked or misleading content in the news or on social media; to impersonate others; or to automate the production of spam/phishing content [54]. Advanced language models may also lead to the automation of various jobs in the coming decades [16]. In order to mitigate these risks, AI systems could be employed to fight against misleading content and automated spam/phishing.\n\n## Acknowledgments\n\nThe authors would like to thank the reviewers for their thoughtful and constructive feedback on this paper, as well as HuggingFace for their help in open-sourcing code to run RAG models. The authors would also like to thank Kyunghyun Cho and Sewon Min for productive discussions and advice. EP thanks supports from the NSF Graduate Research Fellowship. PL is supported by the FAIR PhD program."
        },
        {
            "text": "With these advantages also come potential downsides: Wikipedia, or any potential external knowledge source, will probably never be entirely factual and completely devoid of bias. Since RAG can be employed as a language model, similar concerns as for GPT-2 [50] are valid here, although arguably to a lesser extent, including that it might be used to generate abuse, faked or misleading content in the news or on social media; to impersonate others; or to automate the production of spam/phishing content [54]. Advanced language models may also lead to the automation of various jobs in the coming decades [16]. In order to mitigate these risks, AI systems could be employed to fight against misleading content and automated spam/phishing.",
            "page": 10,
            "x": 104,
            "y": 165,
            "width": 404,
            "height": 92,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "20-discussion",
            "chunk_id": "376e8fbd-5879-4ec1-98f1-d877cd677a21",
            "group_text": "6 Discussion\n\nIn this work, we presented hybrid generation models with access to parametric and non-parametric memory. We showed that our RAG models obtain state of the art results on open-domain QA. We found that people prefer RAG\u2019s generation over purely parametric BART, finding RAG more factual and specific. We conducted an thorough investigation of the learned retrieval component, validating its effectiveness, and we illustrated how the retrieval index can be hot-swapped to update the model without requiring any retraining. In future work, it may be fruitful to investigate if the two components can be jointly pre-trained from scratch, either with a denoising objective similar to BART or some another objective. Our work opens up new research directions on how parametric and non-parametric memories interact and how to most effectively combine them, showing promise in being applied to a wide variety of NLP tasks.\n\n## Broader Impact\n\nThis work offers several positive societal benefits over previous work: the fact that it is more strongly grounded in real factual knowledge (in this case Wikipedia) makes it \u201challucinate\u201d less with generations that are more factual, and offers more control and interpretability. RAG could be employed in a wide variety of scenarios with direct benefit to society, for example by endowing it with a medical index and asking it open-domain questions on that topic, or by helping people be more effective at their jobs.\n\nWith these advantages also come potential downsides: Wikipedia, or any potential external knowledge source, will probably never be entirely factual and completely devoid of bias. Since RAG can be employed as a language model, similar concerns as for GPT-2 [50] are valid here, although arguably to a lesser extent, including that it might be used to generate abuse, faked or misleading content in the news or on social media; to impersonate others; or to automate the production of spam/phishing content [54]. Advanced language models may also lead to the automation of various jobs in the coming decades [16]. In order to mitigate these risks, AI systems could be employed to fight against misleading content and automated spam/phishing.\n\n## Acknowledgments\n\nThe authors would like to thank the reviewers for their thoughtful and constructive feedback on this paper, as well as HuggingFace for their help in open-sourcing code to run RAG models. The authors would also like to thank Kyunghyun Cho and Sewon Min for productive discussions and advice. EP thanks supports from the NSF Graduate Research Fellowship. PL is supported by the FAIR PhD program."
        },
        {
            "text": "## Acknowledgments\n\nThe authors would like to thank the reviewers for their thoughtful and constructive feedback on this paper, as well as HuggingFace for their help in open-sourcing code to run RAG models. The authors would also like to thank Kyunghyun Cho and Sewon Min for productive discussions and advice. EP thanks supports from the NSF Graduate Research Fellowship. PL is supported by the FAIR PhD program.",
            "page": 10,
            "x": 103,
            "y": 268,
            "width": 405,
            "height": 84,
            "color": "yellowgreen",
            "border": "dashed",
            "background_color": "white",
            "group": "20-discussion",
            "chunk_id": "7ea43179-26b3-4530-bc94-4907d274b850",
            "group_text": "6 Discussion\n\nIn this work, we presented hybrid generation models with access to parametric and non-parametric memory. We showed that our RAG models obtain state of the art results on open-domain QA. We found that people prefer RAG\u2019s generation over purely parametric BART, finding RAG more factual and specific. We conducted an thorough investigation of the learned retrieval component, validating its effectiveness, and we illustrated how the retrieval index can be hot-swapped to update the model without requiring any retraining. In future work, it may be fruitful to investigate if the two components can be jointly pre-trained from scratch, either with a denoising objective similar to BART or some another objective. Our work opens up new research directions on how parametric and non-parametric memories interact and how to most effectively combine them, showing promise in being applied to a wide variety of NLP tasks.\n\n## Broader Impact\n\nThis work offers several positive societal benefits over previous work: the fact that it is more strongly grounded in real factual knowledge (in this case Wikipedia) makes it \u201challucinate\u201d less with generations that are more factual, and offers more control and interpretability. RAG could be employed in a wide variety of scenarios with direct benefit to society, for example by endowing it with a medical index and asking it open-domain questions on that topic, or by helping people be more effective at their jobs.\n\nWith these advantages also come potential downsides: Wikipedia, or any potential external knowledge source, will probably never be entirely factual and completely devoid of bias. Since RAG can be employed as a language model, similar concerns as for GPT-2 [50] are valid here, although arguably to a lesser extent, including that it might be used to generate abuse, faked or misleading content in the news or on social media; to impersonate others; or to automate the production of spam/phishing content [54]. Advanced language models may also lead to the automation of various jobs in the coming decades [16]. In order to mitigate these risks, AI systems could be employed to fight against misleading content and automated spam/phishing.\n\n## Acknowledgments\n\nThe authors would like to thank the reviewers for their thoughtful and constructive feedback on this paper, as well as HuggingFace for their help in open-sourcing code to run RAG models. The authors would also like to thank Kyunghyun Cho and Sewon Min for productive discussions and advice. EP thanks supports from the NSF Graduate Research Fellowship. PL is supported by the FAIR PhD program."
        },
        {
            "text": "References\n\n[1] Payal Bajaj, Daniel Campos, Nick Craswell, Li Deng, Jianfeng Gao, Xiaodong Liu, Rangan\nMajumder, Andrew McNamara, Bhaskar Mitra, Tri Nguyen, Mir Rosenberg, Xia Song, Alina\nStoica, Saurabh Tiwary, and Tong Wang. MS MARCO: A Human Generated MAchine\nReading COmprehension Dataset. _arXiv:1611.09268 [cs]_, November 2016. URL http:\n//arxiv.org/abs/1611.09268. arXiv: 1611.09268.\n\n[2] Petr Baudi\u0161 and Jan \u0160ediv\u00fd. Modeling of the question answering task in the yodaqa system. In\n_International Conference of the Cross-Language Evaluation Forum for European Languages_,\npages 222\u2013228. Springer, 2015. URL https://link.springer.com/chapter/10.1007%\n2F978-3-319-24027-5_20.\n\n[3] Jonathan Berant, Andrew Chou, Roy Frostig, and Percy Liang. Semantic Parsing on Freebase\nfrom Question-Answer Pairs. In _Proceedings of the 2013 Conference on Empirical Methods\nin Natural Language Processing_, pages 1533\u20131544, Seattle, Washington, USA, October 2013.\nAssociation for Computational Linguistics. URL http://www.aclweb.org/anthology/\nD13-1160.\n\n[4] Bin Bi, Chenliang Li, Chen Wu, Ming Yan, and Wei Wang. Palm: Pre-training an autoencod-\ning&autoregressive language model for context-conditioned generation. _ArXiv_, abs/2004.07159,\n2020. URL https://arxiv.org/abs/2004.07159.\n\n[5] Danqi Chen, Adam Fisch, Jason Weston, and Antoine Bordes. Reading Wikipedia to Answer\nOpen-Domain Questions. In _Proceedings of the 55th Annual Meeting of the Association for\nComputational Linguistics (Volume 1: Long Papers)_, pages 1870\u20131879, Vancouver, Canada,\nJuly 2017. Association for Computational Linguistics. doi: 10.18653/v1/P17-1171. URL\nhttps://www.aclweb.org/anthology/P17-1171.\n\n[6] Eunsol Choi, Daniel Hewlett, Jakob Uszkoreit, Illia Polosukhin, Alexandre Lacoste, and\nJonathan Berant. Coarse-to-fine question answering for long documents. In _Proceedings of the\n55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)_,\npages 209\u2013220, Vancouver, Canada, July 2017. Association for Computational Linguistics. doi:\n10.18653/v1/P17-1020. URL https://www.aclweb.org/anthology/P17-1020.",
            "page": 10,
            "x": 104,
            "y": 363,
            "width": 406,
            "height": 362,
            "color": "orange",
            "border": "dashed",
            "background_color": "white",
            "group": "21-reference",
            "chunk_id": "9a9c11f2-ac3e-4372-864e-84ced35a7fae",
            "group_text": "References\n\n[1] Payal Bajaj, Daniel Campos, Nick Craswell, Li Deng, Jianfeng Gao, Xiaodong Liu, Rangan\nMajumder, Andrew McNamara, Bhaskar Mitra, Tri Nguyen, Mir Rosenberg, Xia Song, Alina\nStoica, Saurabh Tiwary, and Tong Wang. MS MARCO: A Human Generated MAchine\nReading COmprehension Dataset. _arXiv:1611.09268 [cs]_, November 2016. URL http:\n//arxiv.org/abs/1611.09268. arXiv: 1611.09268.\n\n[2] Petr Baudi\u0161 and Jan \u0160ediv\u00fd. Modeling of the question answering task in the yodaqa system. In\n_International Conference of the Cross-Language Evaluation Forum for European Languages_,\npages 222\u2013228. Springer, 2015. URL https://link.springer.com/chapter/10.1007%\n2F978-3-319-24027-5_20.\n\n[3] Jonathan Berant, Andrew Chou, Roy Frostig, and Percy Liang. Semantic Parsing on Freebase\nfrom Question-Answer Pairs. In _Proceedings of the 2013 Conference on Empirical Methods\nin Natural Language Processing_, pages 1533\u20131544, Seattle, Washington, USA, October 2013.\nAssociation for Computational Linguistics. URL http://www.aclweb.org/anthology/\nD13-1160.\n\n[4] Bin Bi, Chenliang Li, Chen Wu, Ming Yan, and Wei Wang. Palm: Pre-training an autoencod-\ning&autoregressive language model for context-conditioned generation. _ArXiv_, abs/2004.07159,\n2020. URL https://arxiv.org/abs/2004.07159.\n\n[5] Danqi Chen, Adam Fisch, Jason Weston, and Antoine Bordes. Reading Wikipedia to Answer\nOpen-Domain Questions. In _Proceedings of the 55th Annual Meeting of the Association for\nComputational Linguistics (Volume 1: Long Papers)_, pages 1870\u20131879, Vancouver, Canada,\nJuly 2017. Association for Computational Linguistics. doi: 10.18653/v1/P17-1171. URL\nhttps://www.aclweb.org/anthology/P17-1171.\n\n[6] Eunsol Choi, Daniel Hewlett, Jakob Uszkoreit, Illia Polosukhin, Alexandre Lacoste, and\nJonathan Berant. Coarse-to-fine question answering for long documents. In _Proceedings of the\n55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)_,\npages 209\u2013220, Vancouver, Canada, July 2017. Association for Computational Linguistics. doi:\n10.18653/v1/P17-1020. URL https://www.aclweb.org/anthology/P17-1020."
        }
    ]
}